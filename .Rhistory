cd(inst)
dir(/inst)
dir(inst)
dir("inst")
exceldata <- rf_loadexceldata("inst/exdata/exceltest/Reffinder_data_test.xlsx")
dir("inst/exdata")
dir("inst/exdata/exceltest")
exceldata <- rf_loadexceldata()
exceldata <- rf_loadexceldata("/media/patrick/Storage/reffindeR/inst/exdata/exceltest/Reffinder_data_test.xlsx")
exceldata
exceldata
exceldata <- rf_loadexceldata("/media/patrick/Storage/reffindeR/inst/exdata/exceltest/Reffinder_data_test.xlsx")
exceldata
exceldata$Fresh_Frozen
excel[[1]]
dataexcel[[1]]
exceldata[[1]]
exceldata[1]
exceldata$Fresh_Frozen
rf_normfinder(exceldata)
rf_normfinder(exceldata$Fresh_Frozen)
rf_genorm(exceldata$Fresh_Frozen)
rf_bestKeeper(exceldata$Fresh_Frozen)
rf_deltaCt(exceldata$Fresh_Frozen)
rf_reffinder(exceldata)
getwd()
dir.exists("../")
dir.exists("../inst")
dir.exists("../inst/exdata")
dir.exists("../inst/exdata/VignettesOutput")
dir.exists("../inst/exdata/VignettesOutputs")
exceldata <- rf_loadexceldata("../inst/exdata/exceltest/Reffinder_data_test.xlsx")
exceldata
rf_exceltable(exceldata, "../inst/exdata/VignettesOutputs/excel_results", addDate = TRUE)
rf_exceltable(exceldata$Fresh_Frozen, "../inst/exdata/VignettesOutputs/excel_results", addDate = TRUE)
rf_exceltable(exceldata$Fresh_Frozen, "../inst/exdata/VignettesOutputs/excel_results", addDate = TRUE)
rf_exceltable(exceldata[[1]], "../inst/exdata/VignettesOutputs/excel_results", addDate = TRUE)
install.packages("tidyverse")
install.packages("devtools")
install.packages()
install.packages("ctrGene")
install.packages("ctrlGene")
install.packages("reshape2")
install.packages("openxlsx")
library(reffindeR)
library(reffindeR)
exceldata <- rf_loadexceldata("/media/patrick/Storage/reffindeR/inst/exdata/exceltest/Reffinder_data_test.xlsx")
rfder <- rf_reffinder(exceldata)
rfder
library(reffindeR)
library(reffindeR)
library(reffindeR)
reffinderlist
rf_graph <- function(reffinderlist, filename = "", outputPng = FALSE, forceSingle = FALSE, width, height = 0, units = "px", res = 250, ordering = "Comprehensive Rank"){
# 2048, 2156, units = "px", res = 250
# names <- names(reffinderlist)
if(filename==""){
cat("No file name provided, attempting to substract name\n")
filename <- deparse(substitute(reffinderlist))
cat("New file name given\n")
}
if(!is.null(reffinderlist$stabilityTable)){
cat("simplelist, only one dataset\n")
name <- deparse(substitute(reffinderlist))
cat(name)
reffinderlist <- list(reffinderlist)
cat("\nreffinderlist converted\n")
names(reffinderlist) <- name
cat("reffinderlist renamed\n")
# cat("Creating graph\n")
# rf_graphmulti(reffinderlist, filename, outputPng)
# cat("graph created\n")
}
#cat(paste("Width", width))
#cat(paste("Height", height))
if(!is.null(reffinderlist[[1]]$stabilityTable)){
cat("list of lists, maybe more than one dataset\n")
# names <- names(reffinderlist)
if(forceSingle == FALSE){
if(width == 0){
width = length(reffinderlist)*675
}
if(height == 0){
height = 2156
}
rfgraphdraw(reffinderlist, filename, outputPng, width = width, height = height, units = "px", res = 250,  ordering = ordering)
} else { # forceSingle is TRUE
names <- names(reffinderlist)
if(width == 0 && height == 0){
width = 675
height = 2156
}
for (i in 1:length(names)) {
cat(names[i])
cat("\n")
rfgraphdraw(reffinderlist[i], paste(filename, names[i], sep = "_"), outputPng, width = width, height = height, units = "px", res = 250, ordering = ordering)
}
}
}
}
library(reffindeR)
install.packages("~/Documents/R/reffindeR_0.9.3.tar.gz", repos = NULL, type = "source")
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
names(ct_vals) <- c("gene1", "gene2", "gene3", "gene4", "gene5")
nrmfndr <- rf_normfinder(ct_vals)
nrmfndr
expression <- ct_vals
utils::write.table(data.frame(t(expression)), "expression_temp.txt")
# Calculate the stabilities and save in Results
Results = Normfinder("expression_temp.txt", Groups = FALSE)
unlink("expression_temp.txt")
Results
# show the results of the analysis based on individual targets
nrmfndr <- data.frame(Gene = row.names(Results$Ordered), Stability = Results$Ordered$GroupSD)
nrmfndr
nrmfndr <- rforderbystability(nrmfndr)
nrmfndr
nrmfndr$'Stability Rank' <- order(nrmfndr$Stability)
nrmfndr
if(nrmfndr$Stability[i] == nrmfndr$Stability[i-1]){
nrmfndr$`Stability Rank`[i] == nrmfndr$`Stability Rank`[i-1]
}
for (i in 2:nrow(nrmfndr)) {
if(nrmfndr$Stability[i] == nrmfndr$Stability[i-1]){
nrmfndr$`Stability Rank`[i] == nrmfndr$`Stability Rank`[i-1]
}
}
nrmfndr
for (i in 2:nrow(nrmfndr)) {
if(nrmfndr$Stability[i] == nrmfndr$Stability[i-1]){
nrmfndr$`Stability Rank`[i] = nrmfndr$`Stability Rank`[i-1]
}
}
nrmfndr
nrmfndr <- data.frame(Gene = row.names(Results$Ordered), Stability = Results$Ordered$GroupSD)
nrmfndr <- rforderbystability(nrmfndr)
nrmfndr$'Stability Rank' <- order(nrmfndr$Stability)
nrmfndr
nrmfndr <- data.frame(Gene = row.names(Results$Ordered), Stability = Results$Ordered$GroupSD)
nrmfndr <- rforderbystability(nrmfndr)
nrmfndr
rfaddstabilityrank <- function(stabilitytable) {
stabilitytable$'Stability Rank' <- order(stabilitytable$Stability)
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable$Stability[i] == stabilitytable$Stability[i-1]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
}
nrmfndr
nrmfndr <- rfaddstabilityrank(nrmfndr)
nrmfndr
rfaddstabilityrank <- function(stabilitytable) {
stabilitytable$'Stability Rank' <- order(stabilitytable$Stability)
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable$Stability[i] == stabilitytable$Stability[i-1]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
return(stabilitytable)
}
# show the results of the analysis based on individual targets
nrmfndr <- data.frame(Gene = row.names(Results$Ordered), Stability = Results$Ordered$GroupSD)
nrmfndr <- rforderbystability(nrmfndr)
nrmfndr <- rfaddstabilityrank(nrmfndr)
nrmfndr
expression
# Make sure the input is in the form of a data frame
input <- as.data.frame(expression)
# Get the gene names from the column names
genes <- names(input)
# Create a new data frame for the stability values
bk <- data.frame(matrix(nrow = length(genes), ncol = 3))
# Set names of the three columns
names(bk) <- c("Target", "MAD", "Stability Rank")
# Write targets to bestkeeper table
bk$Target <- genes
# Calculate the mean absolute deviation
for (i in 1:ncol(input)) {
# Go through each input data column and save results in bestkeeper table
bk[i,2] <- mean(abs(input[,i]-mean(input[,i])))
}
bk <- rforderbystability(bk)
bk
rfaddstabilityrank(bk)
bk <- data.frame(matrix(nrow = length(genes), ncol = 3))
# Set names of the three columns
names(bk) <- c("Target", "MAD", "Stability Rank")
# Write targets to bestkeeper table
bk$Target <- genes
# Calculate the mean absolute deviation
for (i in 1:ncol(input)) {
# Go through each input data column and save results in bestkeeper table
bk[i,2] <- mean(abs(input[,i]-mean(input[,i])))
}
bk <- rforderbystability(bk)
bk
stabilitytable <- bk
stabilitytable
stabilitytable$'Stability Rank' <- order(stabilitytable$Stability)
stabilitytable$Stability
stabilitytable
stabilitytable$Stability
bk
stabilitytable <- bk
stabilitytable
stabilitytable$Stability
order(stabilitytable$Stability)
stabilitytable$MAD[2] <- stabilitytable$MAD[1]
stabilitytable
stabilitytable$'Stability Rank' <- order(stabilitytable$Stability)
stabilitytable
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable$Stability[i] == stabilitytable$Stability[i-1]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
stabilitytable
stabilitytable
stabilitytable <- bk
stabilitytable
rfaddstabilityrank <- function(stabilitytable, stabilitycol) {
stabilitytable$'Stability Rank' <- order(stabilitytable$stabilitycol)
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable[stabilitycol][i] == stabilitytable[stabilitycol][i-1]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
return(stabilitytable)
}
stabilitytable
rfaddstabilityrank(bk)
rfaddstabilityrank(bk, 2)
bk
stabilitycol
stabilitycol = 2
stabilitycol
order(stabilitytable$stabilitycol)
stabilitytable$'Stability Rank' <- order(stabilitytable[stabilitycol])
order(stabilitytable[stabilitycol])
stabilitytable
rfaddstabilityrank(bk, 2)
rfaddstabilityrank <- function(stabilitytable, stabilitycol) {
stabilitytable$'Stability Rank' <- order(stabilitytable[stabilitycol])
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable[stabilitycol][i] == stabilitytable[stabilitycol][i-1]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
return(stabilitytable)
}
rfaddstabilityrank(bk, 2)
stabilitytable$'Stability Rank' <- order(stabilitytable[ ,stabilitycol])
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable[stabilitycol][i] == stabilitytable[stabilitycol][i-1]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
stabilitytable[stabilitycol]
i
stabilitytable[stabilitycol][i]
stabilitytable[(i-1), stabilitycol]
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable[i, stabilitycol] == stabilitytable[(i-1), stabilitycol]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
rfaddstabilityrank <- function(stabilitytable, stabilitycol) {
stabilitytable$'Stability Rank' <- order(stabilitytable[ ,stabilitycol])
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable[i, stabilitycol] == stabilitytable[(i-1), stabilitycol]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
return(stabilitytable)
}
rfaddstabilityrank(bk, 2)
bk[2,1] = bk[2,5]
bk[1,2] = bk[5,2]
bk
rfaddstabilityrank(bk)
rfaddstabilityrank(bk,2)
rfaddstabilityrank <- function(stabilitytable, stabilitycol) {
stabilitytable <- rforderbystability(stabilitytable)
stabilitytable$'Stability Rank' <- order(stabilitytable$Stability)
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable$Stability[i] == stabilitytable$Stability[i-1]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
return(stabilitytable)
}
rfaddstabilityrank(bk, 2)
stabilitytable
stabilitytable <- bk
stabilitytable
stabilitytable <- rforderbystability(stabilitytable)
stabilitytable
stabilitytable$'Stability Rank' <- order(stabilitytable$Stability)
stabilitytable
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable$Stability[i] == stabilitytable$Stability[i-1]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
stabilitytable
i
stabilitytable$Stability[i]
rfaddstabilityrank <- function(stabilitytable, stabilitycol) {
stabilitytable$'Stability Rank' <- order(stabilitytable[ ,stabilitycol])
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable[i, stabilitycol] == stabilitytable[(i-1), stabilitycol]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
return(stabilitytable)
}
rfaddstabilityrank(bk)
rfaddstabilityrank(bk,2)
rfaddstabilityrank <- function(stabilitytable, stabilitycol) {
stabilitytable <- rforderbystability(stabilitytable)
stabilitytable$'Stability Rank' <- order(stabilitytable[ ,stabilitycol])
for (i in 2:nrow(stabilitytable)) {
if(stabilitytable[i, stabilitycol] == stabilitytable[(i-1), stabilitycol]){
stabilitytable$`Stability Rank`[i] = stabilitytable$`Stability Rank`[i-1]
}
}
return(stabilitytable)
}
rfaddstabilityrank(bk,2)
rfaddstabilityrank(bk, 2)
expression
gnex <- as.data.frame(expression)
gnrm <- ctrlGene::geNorm2(expression)
gnrm$Avg.M[nrow(gnrm)] <- gnrm$Avg.M[nrow(gnrm)-1]
names(gnrm)[1] <- "Target"
gnrm
gnrm <- rfaddstabilityrank(gnrm)
gnrm <- rfaddstabilityrank(gnrm, 2)
gnrm
expression
# Convert to matrix
expression <- as.matrix(expression)
# Get the gene names for later use
genes <- dimnames(expression)[[2]]
# Create a square data frame to hold all combinations of standard deviations.
sddf <- data.frame(matrix(nrow = ncol(expression), ncol = ncol(expression)))
row.names(sddf) <- genes
names(sddf) <- genes
# Calculate standard deviations of all combinations of deltaCt and save them in the data frame
for (i in 1:(ncol(expression)-1)){
for (j in (i+1):ncol(expression)){
sddf[j,i] = stats::sd( expression[,i] - expression[,j] )
}
}
# Create a new data frame for the mean standard deviations for each gene
DC_tbl <- data.frame(matrix(ncol = 3, nrow = ncol(expression)))
names(DC_tbl) <- c("Gene", "Average of STDEV", "Stability Rank")
DC_tbl$Gene <- genes
# Calculate the mean standard deviations for each gene, save it in the data frame
for (i in 1:nrow(sddf)){
# mean is calculated by combining row and column for each gene in a vector.
DC_tbl[i,2] <- round(mean( unlist(  c(sddf[i, ] , sddf[, i] )   ), na.rm = TRUE), 3)
}
DC_tbl
names(DC_tbl) <- c("Target", "Average of STDEV", "Stability Rank")
DC_tbl
DC_tbl <- rfaddstabilityrank(DC_tbl, 2)
DC_tbl
library(reffindeR)
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
dct <- rf_deltaCt(ct_vals)
dct
ct_vals
rf_deltaCt(ct_vals)
library(reffindeR)
ct_vals
rf_deltaCt(ct_vals)
library(reffindeR)
library(reffindeR)
rm(rf_graph())
rm(rf_graph
)
rm(rfgraphdraw)
rm(rfaddstabilityrank)
library(reffindeR)
library(reffindeR)
library(reffindeR)
readLines(paste0(find.package("reffindeR", lib.loc = NULL, quiet = TRUE), "/exdata/r.NormOldStab5.txt"))
library(refSeeker)
library(refSeeker)
library(testthat)
library(refSeeker)
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
Target <- c("gene2", "gene1", "gene4", "gene3", "gene5")
res <- rs_normfinder(ct_vals)
res
rsadjustnmfRounding(decimals = 3)
res <- rs_normfinder(ct_vals)
res
str(res)
str(res)[1]
is.data.frame(res)
test_check("refSeeker")
test_dir()
test_that("Normfinder online script can be loaded", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
Target <- c("gene2", "gene1", "gene4", "gene3", "gene5")
"Average of STDEV" <- c(1.292, 1.295, 1.402, 1.453, 1.614)
"Stability Rank" <- c(1,2,3,4,5)
results <- data.frame(Target, `Average of STDEV`, `Stability Rank`, check.names = F)
res <- rs_normfinder(ct_vals)
is.data.frame(res)
expect_true(is.data.frame(res))
})
library(refSeeker)
remove.packages("reffindeR", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
detach("package:refSeeker", unload = TRUE)
remove.packages("refSeeker", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
install.packages("~/Documents/R/refSeeker_0.9.4.tar.gz", repos = NULL, type = "source")
res <- rs_normfinder(ct_vals)
library(refSeeker)
res <- rs_normfinder(ct_vals)
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_normfinder(ct_vals)
res
find.package("refSeeker", lib.loc=NULL, quiet = TRUE)
find.package("refSeeker", lib.loc = NULL, quiet = TRUE)
library(refSeeker)
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
rs_normfinder(ct_vals)
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals
Sys.getenv("R_TEST")
options("HTTPUserAgent")
writeLines(options("HTTPUserAgent"), "/home/R/testlog.txt")
writeLines(options("HTTPUserAgent")[1], "/home/R/testlog.txt")
writeLines(options("HTTPUserAgent")[[1]], "/home/R/testlog.txt")
writeLines(options("HTTPUserAgent")[[1]], "/home/R/testlog.txt")
writeLines(options("HTTPUserAgent")[[1]], "~/R/testlog.txt")
writeLines(options("HTTPUserAgent")[[1]], "~/R/testlog.txt")
library(testthat)
library(refSeeker)
test_check("refSeeker")
test_that("Normfinder online script can be loaded", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
# Target <- c("gene2", "gene1", "gene4", "gene3", "gene5")
#
# "Average of STDEV" <- c(1.292, 1.295, 1.402, 1.453, 1.614)
#
# "Stability Rank" <- c(1,2,3,4,5)
#
# results <- data.frame(Target, `Average of STDEV`, `Stability Rank`, check.names = F)
writeLines(options("HTTPUserAgent")[[1]], "~/R/testlog.txt")
res <- rs_normfinder(ct_vals)
is.data.frame(res)
expect_true(is.data.frame(res))
})
write(options("HTTPUserAgent")[[1]], "~/R/testlog.txt", append = TRUE)
test_that("Normfinder online script can be loaded", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
# Target <- c("gene2", "gene1", "gene4", "gene3", "gene5")
#
# "Average of STDEV" <- c(1.292, 1.295, 1.402, 1.453, 1.614)
#
# "Stability Rank" <- c(1,2,3,4,5)
#
# results <- data.frame(Target, `Average of STDEV`, `Stability Rank`, check.names = F)
write(options("HTTPUserAgent")[[1]], "~/R/testlog.txt", append = TRUE)
res <- rs_normfinder(ct_vals)
is.data.frame(res)
expect_true(is.data.frame(res))
})
httr::user_agent("RStudio Desktop (2022.7.1.554); R (4.2.1 x86_64-pc-linux-gnu x86_64 linux-gnu)")
write(options("HTTPUserAgent")[[1]], "~/R/testlog.txt", append = TRUE)
write(options("HTTPUserAgent")[[1]], "~/R/testlog.txt", append = TRUE)
httr::user_agent("R (4.2.1 x86_64-pc-linux-gnu x86_64 linux-gnu)")
write(options("HTTPUserAgent")[[1]], "~/R/testlog.txt", append = TRUE)
test_that("Normfinder online script can be loaded", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
# Target <- c("gene2", "gene1", "gene4", "gene3", "gene5")
#
# "Average of STDEV" <- c(1.292, 1.295, 1.402, 1.453, 1.614)
#
# "Stability Rank" <- c(1,2,3,4,5)
#
# results <- data.frame(Target, `Average of STDEV`, `Stability Rank`, check.names = F)
httr::user_agent("R (4.2.1 x86_64-pc-linux-gnu x86_64 linux-gnu)")
write(options("HTTPUserAgent")[[1]], "~/R/testlog.txt", append = TRUE)
res <- rs_normfinder(ct_vals)
is.data.frame(res)
expect_true(is.data.frame(res))
})
