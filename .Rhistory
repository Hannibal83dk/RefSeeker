names(refseekerlist) <- gsub("_", " ", names(refseekerlist))
return()
if (forceSingle == FALSE) {
# if(filename != ""){
if (missing(width)) {
if(orientation == "horizontal"){
width <- 2400
} else { width = length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) }
cat(paste("width set to", width, "\n"))
}
if (missing(height)) {
if(orientation == "horizontal"){
height <- length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) * 0.7
#make sure names of data can fit into the vertical name bar.
## Base drawings takes 240 px. Each character measured as capital X takes 60 px.
### If height is set to smaller than the longest name the height is set to this value (nchar * 60 + 240).Â´
if(height < max(nchar(names(refseekerlist))) *60 + 240){
height = max(nchar(names(refseekerlist))) *60 + 240
}
#cat(      max(nchar(names(refseekerlist))) *60 + 240       )
} else { height = 2156 }
cat(paste("height set to", height, "\n"))
}
# }
# return(list(refseekerlist, filename,
#             width = width,
#             height = height,
#             units = units,
#             res = res,
#             ordering = ordering,
#             filetype = filetype,
#             colors = colors,
#             orientation = orientation))
graphs <- rsgraphdraw(refseekerlist, filename, width = width, height = height, units = units, res = res,  ordering = ordering, filetype = filetype, colors = colors, orientation = orientation)
print(graphs)
} else { # forceSingle is TRUE
names <- names(refseekerlist)
graphs <- list()
for (i in 1:length(names)) {
if (missing(width)) {
if(orientation == "horizontal") {
width = 2156
} else {  width = 70 * nrow( refseekerlist[[i]][[1]] ) }
}
if (missing(height)) {
if(orientation == "horizontal") {
height = 70 * nrow( refseekerlist[[i]][[1]] )
} else { height = 2156 }
}
cat(names[i])
cat("\n")
# return(list(refseekerlist[i],
#             paste0(filename, "_", gsub(" ", "_", names[i])),
#             width = width,
#             height = height,
#             units = units,
#             res = res,
#             ordering = ordering,
#             filetype = filetype,
#             colors = colors,
#             orientation = orientation))
if(filename != ""){ filename <- paste0(filename, "_", gsub(" ", "_", names[i])) }
# temp <- list(refseekerlist[i])
# print(refseekerlist)
p <- rsgraphdraw(refseekerlist[i], filename, width = width, height = height, units = units, res = res, ordering = ordering, filetype = filetype, colors = colors, orientation = orientation)
graphs[[i]] <- print(p)
}
}
}
#print(graphs)
return(graphs)
}
rs_graph(Fresh_frozenList, filename = "Tester")
refseekerlist
rs_graph <- function(refseekerlist, filename = "",
filetype = "png",
forceSingle = FALSE,
width, height, units = "px", res = 250,
ordering = "Comprehensive Rank",
colors = "",
orientation = "horizontal"){
isSingle = NA
# Check to see if the provided list is a list of list or "just" a list (one data set).
## Will evaluate to TRUE if we are dealing with a simple list (one data set).
if(!is.null(refseekerlist$stabilityTable)){
cat("simplelist, only one dataset\n")
# name <- deparse(substitute(refseekerlist))
# cat(name)
name <- deparse(substitute(refseekerlist))
refseekerlist <- list(refseekerlist)
cat("\nrefseekerlist converted\n")
cat(name)
names(refseekerlist) <- gsub("_", " ", name)
cat("\nrefseekerlist renamed\n")
print(names(refseekerlist))
forceSingle = FALSE
isSingle = TRUE
}
if(!is.null(refseekerlist[[1]]$stabilityTable)){
cat("list of lists, maybe more than one dataset\n")
names(refseekerlist) <- gsub("_", " ", names(refseekerlist))
print(length(refseekerlist))
return()
if (forceSingle == FALSE) {
# if(filename != ""){
if (missing(width)) {
if(orientation == "horizontal"){
width <- 2400
} else { width = length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) }
cat(paste("width set to", width, "\n"))
}
if (missing(height)) {
if(orientation == "horizontal"){
height <- length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) * 0.7
#make sure names of data can fit into the vertical name bar.
## Base drawings takes 240 px. Each character measured as capital X takes 60 px.
### If height is set to smaller than the longest name the height is set to this value (nchar * 60 + 240).Â´
if(height < max(nchar(names(refseekerlist))) *60 + 240){
height = max(nchar(names(refseekerlist))) *60 + 240
}
#cat(      max(nchar(names(refseekerlist))) *60 + 240       )
} else { height = 2156 }
cat(paste("height set to", height, "\n"))
}
# }
# return(list(refseekerlist, filename,
#             width = width,
#             height = height,
#             units = units,
#             res = res,
#             ordering = ordering,
#             filetype = filetype,
#             colors = colors,
#             orientation = orientation))
graphs <- rsgraphdraw(refseekerlist, filename, width = width, height = height, units = units, res = res,  ordering = ordering, filetype = filetype, colors = colors, orientation = orientation)
print(graphs)
} else { # forceSingle is TRUE
names <- names(refseekerlist)
graphs <- list()
for (i in 1:length(names)) {
if (missing(width)) {
if(orientation == "horizontal") {
width = 2156
} else {  width = 70 * nrow( refseekerlist[[i]][[1]] ) }
}
if (missing(height)) {
if(orientation == "horizontal") {
height = 70 * nrow( refseekerlist[[i]][[1]] )
} else { height = 2156 }
}
cat(names[i])
cat("\n")
# return(list(refseekerlist[i],
#             paste0(filename, "_", gsub(" ", "_", names[i])),
#             width = width,
#             height = height,
#             units = units,
#             res = res,
#             ordering = ordering,
#             filetype = filetype,
#             colors = colors,
#             orientation = orientation))
if(filename != ""){ filename <- paste0(filename, "_", gsub(" ", "_", names[i])) }
# temp <- list(refseekerlist[i])
# print(refseekerlist)
p <- rsgraphdraw(refseekerlist[i], filename, width = width, height = height, units = units, res = res, ordering = ordering, filetype = filetype, colors = colors, orientation = orientation)
graphs[[i]] <- print(p)
}
}
}
#print(graphs)
return(graphs)
}
rs_graph(Fresh_frozenList, filename = "Tester")
rs_graph <- function(refseekerlist, filename = "",
filetype = "png",
forceSingle = FALSE,
width, height, units = "px", res = 250,
ordering = "Comprehensive Rank",
colors = "",
orientation = "horizontal"){
isSingle = NA
# Check to see if the provided list is a list of list or "just" a list (one data set).
## Will evaluate to TRUE if we are dealing with a simple list (one data set).
if(!is.null(refseekerlist$stabilityTable)){
cat("simplelist, only one dataset\n")
# name <- deparse(substitute(refseekerlist))
# cat(name)
name <- deparse(substitute(refseekerlist))
refseekerlist <- list(refseekerlist)
cat("\nrefseekerlist converted\n")
cat(name)
names(refseekerlist) <- gsub("_", " ", name)
cat("\nrefseekerlist renamed\n")
print(names(refseekerlist))
}
if(!is.null(refseekerlist[[1]]$stabilityTable)){
cat("list of lists, maybe more than one dataset\n")
names(refseekerlist) <- gsub("_", " ", names(refseekerlist))
if(length(refseekerlist) == 1){
forceSingle = FALSE
isSingle = TRUE
}
if (forceSingle == FALSE) {
# if(filename != ""){
if (missing(width)) {
if(orientation == "horizontal"){
width <- 2400
} else { width = length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) }
cat(paste("width set to", width, "\n"))
}
if (missing(height)) {
if(orientation == "horizontal"){
height <- length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) * 0.7
#make sure names of data can fit into the vertical name bar.
## Base drawings takes 240 px. Each character measured as capital X takes 60 px.
### If height is set to smaller than the longest name the height is set to this value (nchar * 60 + 240).Â´
if(height < max(nchar(names(refseekerlist))) *60 + 240){
height = max(nchar(names(refseekerlist))) *60 + 240
}
#cat(      max(nchar(names(refseekerlist))) *60 + 240       )
} else { height = 2156 }
cat(paste("height set to", height, "\n"))
}
# }
# return(list(refseekerlist, filename,
#             width = width,
#             height = height,
#             units = units,
#             res = res,
#             ordering = ordering,
#             filetype = filetype,
#             colors = colors,
#             orientation = orientation))
graphs <- rsgraphdraw(refseekerlist, filename, width = width, height = height, units = units, res = res,  ordering = ordering, filetype = filetype, colors = colors, orientation = orientation)
print(graphs)
} else { # forceSingle is TRUE
names <- names(refseekerlist)
graphs <- list()
for (i in 1:length(names)) {
if (missing(width)) {
if(orientation == "horizontal") {
width = 2156
} else {  width = 70 * nrow( refseekerlist[[i]][[1]] ) }
}
if (missing(height)) {
if(orientation == "horizontal") {
height = 70 * nrow( refseekerlist[[i]][[1]] )
} else { height = 2156 }
}
cat(names[i])
cat("\n")
# return(list(refseekerlist[i],
#             paste0(filename, "_", gsub(" ", "_", names[i])),
#             width = width,
#             height = height,
#             units = units,
#             res = res,
#             ordering = ordering,
#             filetype = filetype,
#             colors = colors,
#             orientation = orientation))
if(filename != ""){ filename <- paste0(filename, "_", gsub(" ", "_", names[i])) }
# temp <- list(refseekerlist[i])
# print(refseekerlist)
p <- rsgraphdraw(refseekerlist[i], filename, width = width, height = height, units = units, res = res, ordering = ordering, filetype = filetype, colors = colors, orientation = orientation)
graphs[[i]] <- print(p)
}
}
}
#print(graphs)
return(graphs)
}
rs_graph(Fresh_frozenList, filename = "Tester")
refseekerlist <- rs_graph(resultsAll, filename = "Tester")
resultsAll <- rs_reffinder(data)
rs_graph(resultsAll, filename = "Tester")
rs_graph(resultsAll, filename = "Tester", forceSingle = T)
refseekerlist <- rs_graph(resultsAll)
rs_graph <- function(refseekerlist, filename = "",
filetype = "png",
forceSingle = FALSE,
width, height, units = "px", res = 250,
ordering = "Comprehensive Rank",
colors = "",
orientation = "horizontal"){
isSingle = NA
# Check to see if the provided list is a list of list or "just" a list (one data set).
## Will evaluate to TRUE if we are dealing with a simple list (one data set).
if(!is.null(refseekerlist$stabilityTable)){
cat("simplelist, only one dataset\n")
# name <- deparse(substitute(refseekerlist))
# cat(name)
name <- deparse(substitute(refseekerlist))
refseekerlist <- list(refseekerlist)
cat("\nrefseekerlist converted\n")
cat(name)
names(refseekerlist) <- gsub("_", " ", name)
cat("\nrefseekerlist renamed\n")
print(names(refseekerlist))
}
if(!is.null(refseekerlist[[1]]$stabilityTable)){
cat("list of lists, maybe more than one dataset\n")
names(refseekerlist) <- gsub("_", " ", names(refseekerlist))
if(length(refseekerlist) == 1){
forceSingle = FALSE
isSingle = TRUE
}
if (forceSingle == FALSE) {
# if(filename != ""){
if (missing(width)) {
if(orientation == "horizontal"){
width <- 2400
} else { width = length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) }
cat(paste("width set to", width, "\n"))
}
if (missing(height)) {
if(orientation == "horizontal"){
height <- length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) * 0.7
#make sure names of data can fit into the vertical name bar.
## Base drawings takes 240 px. Each character measured as capital X takes 60 px.
### If height is set to smaller than the longest name the height is set to this value (nchar * 60 + 240).Â´
if(height < max(nchar(names(refseekerlist))) *60 + 240){
height = max(nchar(names(refseekerlist))) *60 + 240
}
#cat(      max(nchar(names(refseekerlist))) *60 + 240       )
} else { height = 2156 }
cat(paste("height set to", height, "\n"))
}
# }
# return(list(refseekerlist, filename,
#             width = width,
#             height = height,
#             units = units,
#             res = res,
#             ordering = ordering,
#             filetype = filetype,
#             colors = colors,
#             orientation = orientation))
graphs <- rsgraphdraw(refseekerlist, filename, width = width, height = height, units = units, res = res,  ordering = ordering, filetype = filetype, colors = colors, orientation = orientation)
print(graphs)
} else { # forceSingle is TRUE
names <- names(refseekerlist)
graphs <- list()
for (i in 1:length(names)) {
if (missing(width)) {
if(orientation == "horizontal") {
width = 2156
} else {  width = 70 * nrow( refseekerlist[[i]][[1]] ) }
}
if (missing(height)) {
if(orientation == "horizontal") {
height = 70 * nrow( refseekerlist[[i]][[1]] )
} else { height = 2156 }
}
cat(names[i])
cat("\n")
# return(list(refseekerlist[i],
#             paste0(filename, "_", gsub(" ", "_", names[i])),
#             width = width,
#             height = height,
#             units = units,
#             res = res,
#             ordering = ordering,
#             filetype = filetype,
#             colors = colors,
#             orientation = orientation))
if(filename != ""){ flnm <- paste0(filename, "_", gsub(" ", "_", names[i])) }
# temp <- list(refseekerlist[i])
# print(refseekerlist)
p <- rsgraphdraw(refseekerlist[i], flnm, width = width, height = height, units = units, res = res, ordering = ordering, filetype = filetype, colors = colors, orientation = orientation)
graphs[[i]] <- print(p)
}
}
}
#print(graphs)
return(graphs)
}
rs_graph(resultsAll, filename = "Tester")
rs_graph(resultsAll, filename = "Tester", forceSingle = T)
length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) * 0.7
refseekerlist
refseekerlist <- resultsAll
length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5)
length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) * 0.7
height < max(nchar(names(refseekerlist))) *60 + 240
max(nchar(names(refseekerlist))) *60 + 240
rs_graph <- function(refseekerlist, filename = "",
filetype = "png",
forceSingle = FALSE,
width, height, units = "px", res = 250,
ordering = "Comprehensive Rank",
colors = "",
orientation = "horizontal"){
isSingle = NA
# Check to see if the provided list is a list of list or "just" a list (one data set).
## Will evaluate to TRUE if we are dealing with a simple list (one data set).
if(!is.null(refseekerlist$stabilityTable)){
cat("simplelist, only one dataset\n")
# name <- deparse(substitute(refseekerlist))
# cat(name)
name <- deparse(substitute(refseekerlist))
refseekerlist <- list(refseekerlist)
cat("\nrefseekerlist converted\n")
cat(name)
names(refseekerlist) <- gsub("_", " ", name)
cat("\nrefseekerlist renamed\n")
print(names(refseekerlist))
}
if(!is.null(refseekerlist[[1]]$stabilityTable)){
cat("list of lists, maybe more than one dataset\n")
names(refseekerlist) <- gsub("_", " ", names(refseekerlist))
if(length(refseekerlist) == 1){
forceSingle = FALSE
isSingle = TRUE
}
if (forceSingle == FALSE) {
# if(filename != ""){
if (missing(width)) {
if(orientation == "horizontal"){
width <- 2400
} else { width = length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) }
cat(paste("width set to", width, "\n"))
}
if (missing(height)) {
if(orientation == "horizontal"){
height <- length(refseekerlist) * (nrow(refseekerlist[[1]][[1]]) * 67.5) * 0.7
#make sure names of data can fit into the vertical name bar.
## Base drawings takes 240 px. Each character measured as capital X takes 60 px.
### If height is set to smaller than the longest name the height is set to this value (nchar * 60 + 240).Â´
if(height < max(nchar(names(refseekerlist))) *60 + 240){
height = max(nchar(names(refseekerlist))) *60 + 240
}
#cat(      max(nchar(names(refseekerlist))) *60 + 240       )
} else { height = 2156 }
cat(paste("height set to", height, "\n"))
}
# }
# return(list(refseekerlist, filename,
#             width = width,
#             height = height,
#             units = units,
#             res = res,
#             ordering = ordering,
#             filetype = filetype,
#             colors = colors,
#             orientation = orientation))
graphs <- rsgraphdraw(refseekerlist, filename, width = width, height = height, units = units, res = res,  ordering = ordering, filetype = filetype, colors = colors, orientation = orientation)
print(graphs)
} else { # forceSingle is TRUE
names <- names(refseekerlist)
graphs <- list()
for (i in 1:length(names)) {
if (missing(width)) {
if(orientation == "horizontal") {
width = 2400
} else {  width = 70 * nrow( refseekerlist[[i]][[1]] ) }
}
if (missing(height)) {
if(orientation == "horizontal") {
height = 70 * nrow( refseekerlist[[i]][[1]] )
#make sure names of data can fit into the vertical name bar.
## Base drawings takes 240 px. Each character measured as capital X takes 60 px.
### If height is set to smaller than the longest name the height is set to this value (nchar * 60 + 240).Â´
if(height < max(nchar(names(refseekerlist))) *60 + 240){
height = max(nchar(names(refseekerlist))) *60 + 240
}
} else { height = 2156 }
}
cat(names[i])
cat("\n")
# return(list(refseekerlist[i],
#             paste0(filename, "_", gsub(" ", "_", names[i])),
#             width = width,
#             height = height,
#             units = units,
#             res = res,
#             ordering = ordering,
#             filetype = filetype,
#             colors = colors,
#             orientation = orientation))
if(filename != ""){ flnm <- paste0(filename, "_", gsub(" ", "_", names[i])) }
# temp <- list(refseekerlist[i])
# print(refseekerlist)
p <- rsgraphdraw(refseekerlist[i], flnm, width = width, height = height, units = units, res = res, ordering = ordering, filetype = filetype, colors = colors, orientation = orientation)
graphs[[i]] <- print(p)
}
}
}
#print(graphs)
return(graphs)
}
rs_graph(resultsAll, filename = "Tester", forceSingle = T)
library(RefSeeker)
library(RefSeeker)
file <- file.choose()
data <- rs_loaddata(file)
resultsAll <- rs_reffinder(data)
rs_graph(resultsAll, filename = "Tester", forceSingle = T)
library(RefSeeker)
rs_graph(resultsAll, filename = "Tester", forceSingle = T)
rs_graph(resultsAll,forceSingle = T)
rs_graph(resultsAll, forceSingle = T)
library(RefSeeker)
rs_graph(resultsAll, forceSingle = T)
colors <- data.frame(targets = names(inputData[[1]]), color = c("#b34126", "#d9ad4c", "#88b5de", "#1c440b", "#374f65"))
colors <- data.frame(targets = names(data[[1]]), color = c("#b34126", "#d9ad4c", "#88b5de", "#1c440b", "#374f65"))
rs_graph(resultsAll, colors = colors, forceSingle = T)
data <- rs_loaddata()
rs_graph()
rs_graph(resultsAll)
library(RefSeeker)
