datatest <- function(expression){
# Testing for missing values
for (i in 1:length(expression)) {
#expression[[i]][5,2] <- NA
if(FALSE %in% complete.cases(expression[[i]])){
warning(paste("Caution: Missing data located in ", names(expression[i])))
}
}
# Testing columns for outliers. More than 20% is may be indicative of transposed data table.
## Note this test is not based on anything other than the authers idea of how to test for columns not representing targets
caution = FALSE
for (i in 1:length(expression)) {
for (j in 1:ncol(expression[[i]])) {
# cat(paste("\nTesting: [", names(expression[i]), "-", names(expression[[i]])[j],"]"))
box <- boxplot(expression[[i]][j])
if(length(box$out)/box$n > 0.2){
#cat(" - Caution, more than 20% outliers detected")
caution <- TRUE
} else {#cat("- OK")
}
}
}
if(caution){
warning("Caution, more than 20% outliers were detected in some colums.
\rPlease check that targets(Gene/mRNA/miRNA) are represented as columns and samples as rows")
}
}
#'
#' @aliases rs_loadodsdata()
#'
#' @examples
#'
#' \dontrun{
#' rs_loadexceldata()
#' }
#'
#'
rs_loadexceldata <- function(filepath = ""){
datalist <- list()
if(filepath == ""){
filepath <- file.choose()
}
ext <- tolower(tools::file_ext(filepath))
# For excel files
if(substring(ext, 1,2) == "xl"){
sheets <- readxl::excel_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readxl::read_excel(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
# For ods
if(ext == "ods"){
sheets <- readODS::list_ods_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readODS::read_ods(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
datatest(datalist)
#cat("\nPlease note: These tests are not a guarantee for (im)prober structure of dataset(s)")
return(datalist)
}
rs_loadexceldata()
data <- rs_loadexceldata()
data <- rs_loadexceldata()
data <- rs_loadexceldata()
#'
#' @aliases rs_loadodsdata()
#'
#' @examples
#'
#' \dontrun{
#' rs_loadexceldata()
#' }
#'
#'
rs_loadexceldata <- function(filepath = ""){
datalist <- list()
if(filepath == ""){
filepath <- file.choose()
}
ext <- tolower(tools::file_ext(filepath))
# For excel files
if(substring(ext, 1,2) == "xl"){
sheets <- readxl::excel_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readxl::read_excel(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
# For ods
if(ext == "ods"){
sheets <- readODS::list_ods_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readODS::read_ods(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
#datatest(datalist)
#cat("\nPlease note: These tests are not a guarantee for (im)prober structure of dataset(s)")
return(datalist)
}
data <- rs_loadexceldata()
View(data)
View(data[["FFPE"]])
expression <- data
datatest(expression)
# Testing for missing values
for (i in 1:length(expression)) {
#expression[[i]][5,2] <- NA
if(FALSE %in% complete.cases(expression[[i]])){
warning(paste("Caution: Missing data located in ", names(expression[i])))
}
}
# Testing for missing values
for (i in 1:length(expression)) {
#expression[[i]][5,2] <- NA
if(FALSE %in% complete.cases(expression[[i]])){
warning(paste("Caution: Missing data located in:", names(expression[i])))
}
}
# Testing for missing values
for (i in 1:length(expression)) {
#expression[[i]][5,2] <- NA
if(FALSE %in% complete.cases(expression[[i]])){
warning(paste("Caution: Missing data located in:", names(expression[i]), "\nMissing data is discauraged"))
}
}
# Testing for missing values
for (i in 1:length(expression)) {
#expression[[i]][5,2] <- NA
if(FALSE %in% complete.cases(expression[[i]])){
warning(paste("Caution: Missing data located in:", names(expression[i]), "\nMissing data is discauraged and may lead to errors"))
}
}
ncol(expression)
length(expression)
i =1
ncol(expression[[i]]
)
j = 1
str(expression[[i][j]])
expression[[i][j]]
str(expression[[i]][j])
str(expression[[i]][,j])
is.numeric(str(expression[[i]][,j]))
i
j
str(expression[[i]][,j])
is.numeric(str(expression[[i]][,j]))
is.numeric(str(expression[[i]][[j]]))
str(expression[[i]][[j]])
is.numeric(expression[[i]][[j]])
is.numeric(expression[[1]])
expression[[1]]
is.numeric(expression[[1,1]])
is.numeric(expression[1,1])
is.numeric(expression[11])
is.numeric(expression[1])
is.numeric(expression[1][1])
expression[1][1]
is.numeric(expression[[1]][1])
is.numeric(expression[[1]][[1]])
expression[[1]][[1]]
warning(paste("Non numeric columns found in:", names(expression[[i]])))
warning(paste("Non numeric columns found in:", names(expression[i])))
for (i in 1:length(expression)) {
for (j in 1:ncol(expression[[i]])) {
if(is.numeric(expression[[i]][[j]])){
warning(paste("Non numeric columns found in:", names(expression[i]),"\nPlease make sure columns represent target RNA species and row represent samples"))
}
}
}
warnings()
for (i in 1:length(expression)) {
for (j in 1:ncol(expression[[i]])) {
if(is.numeric(expression[[i]][[j]])){
warning(paste("Non numeric columns found in:", names(expression[i]),"\nPlease make sure columns represent target RNA species and row represent samples"))
break()
}
}
}
for (i in 1:length(expression)) {
for (j in 1:ncol(expression[[i]])) {
if(!is.numeric(expression[[i]][[j]])){
warning(paste("Non numeric columns found in:", names(expression[i]),"\nPlease make sure columns represent target RNA species and row represent samples"))
break()
}
}
}
datatest <- function(expression){
# Testing for missing values
for (i in 1:length(expression)) {
#expression[[i]][5,2] <- NA
if(FALSE %in% complete.cases(expression[[i]])){
warning(paste("Caution: Missing data located in:", names(expression[i]), "\nMissing data is discauraged and may lead to errors"))
}
}
# Testing columns for outliers. More than 20% is may be indicative of transposed data table.
## Note this test is not based on anything other than the authers idea of how to test for columns not representing targets
caution = FALSE
for (i in 1:length(expression)) {
for (j in 1:ncol(expression[[i]])) {
if(!is.numeric(expression[[i]][[j]])){
warning(paste("Non numeric columns found in:", names(expression[i]),"\nPlease make sure columns represent target RNA species and rows represent samples"))
break()
}
}
}
# for (i in 1:length(expression)) {
#   for (j in 1:ncol(expression[[i]])) {
#
#     # cat(paste("\nTesting: [", names(expression[i]), "-", names(expression[[i]])[j],"]"))
#     box <- boxplot(expression[[i]][j])
#
#     if(length(box$out)/box$n > 0.2){
#       #cat(" - Caution, more than 20% outliers detected")
#       caution <- TRUE
#     } else {#cat("- OK")
#     }
#
#   }
#
# }
#
if(caution){
warning("Caution, more than 20% outliers were detected in some colums.
\rPlease check that targets(Gene/mRNA/miRNA) are represented as columns and samples as rows")
}
}
data <- rs_loadexceldata()
#'
#' @aliases rs_loadodsdata()
#'
#' @examples
#'
#' \dontrun{
#' rs_loadexceldata()
#' }
#'
#'
rs_loadexceldata <- function(filepath = ""){
datalist <- list()
if(filepath == ""){
filepath <- file.choose()
}
ext <- tolower(tools::file_ext(filepath))
# For excel files
if(substring(ext, 1,2) == "xl"){
sheets <- readxl::excel_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readxl::read_excel(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
# For ods
if(ext == "ods"){
sheets <- readODS::list_ods_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readODS::read_ods(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
datatest(datalist)
#cat("\nPlease note: These tests are not a guarantee for (im)prober structure of dataset(s)")
return(datalist)
}
data <- rs_loadexceldata()
#'
#' @aliases rs_loadodsdata()
#'
#' @examples
#'
#' \dontrun{
#' rs_loadexceldata()
#' }
#'
#'
rs_loadexceldata <- function(filepath = ""){
datalist <- list()
if(filepath == ""){
filepath <- file.choose()
}
ext <- tolower(tools::file_ext(filepath))
# For excel files
if(substring(ext, 1,2) == "xl"){
sheets <- readxl::excel_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readxl::read_excel(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
# For ods
if(ext == "ods"){
sheets <- readODS::list_ods_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readODS::read_ods(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
datatest(datalist)
#cat("\nPlease note: These tests are not a guarantee for (im)prober structure of dataset(s)")
return(datalist)
}
#'
#' @aliases rs_loadodsdata()
#'
#' @examples
#'
#' \dontrun{
#' rs_loadexceldata()
#' }
#'
#'
rs_loadexceldata <- function(filepath = ""){
datalist <- list()
if(filepath == ""){
filepath <- file.choose()
}
ext <- tolower(tools::file_ext(filepath))
# For excel files
if(substring(ext, 1,2) == "xl"){
sheets <- readxl::excel_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readxl::read_excel(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
# For ods
if(ext == "ods"){
sheets <- readODS::list_ods_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readODS::read_ods(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
datatest(datalist)
#cat("\nPlease note: These tests are not a guarantee for (im)prober structure of dataset(s)")
return(datalist)
}
#'
#' @aliases rs_loadodsdata()
#'
#' @examples
#'
#' \dontrun{
#' rs_loadexceldata()
#' }
#'
#'
rs_loadexceldata <- function(filepath = ""){
datalist <- list()
if(filepath == ""){
filepath <- file.choose()
}
ext <- tolower(tools::file_ext(filepath))
# For excel files
if(substring(ext, 1,2) == "xl"){
sheets <- readxl::excel_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readxl::read_excel(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
# For ods
if(ext == "ods"){
sheets <- readODS::list_ods_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readODS::read_ods(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
datatest(datalist)
#cat("\nPlease note: These tests are not a guarantee for (im)prober structure of dataset(s)")
return(datalist)
}
#'
#' @aliases rs_loadodsdata()
#'
#' @examples
#'
#' \dontrun{
#' rs_loadexceldata()
#' }
#'
#'
rs_loadexceldata <- function(filepath = ""){
datalist <- list()
if(filepath == ""){
filepath <- file.choose()
}
ext <- tolower(tools::file_ext(filepath))
# For excel files
if(substring(ext, 1,2) == "xl"){
sheets <- readxl::excel_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readxl::read_excel(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
# For ods
if(ext == "ods"){
sheets <- readODS::list_ods_sheets(filepath)
for (i in 1:length(sheets)){
datalist[[i]] <- readODS::read_ods(filepath, i)
}
names(datalist) <- sub(" ", "_", sheets)
}
datatest(datalist)
#cat("\nPlease note: These tests are not a guarantee for (im)prober structure of dataset(s)")
return(datalist)
}
source("~/OneDrive/Dokumenter/R/refSeeker/R/rs_loadexceldata.R", echo=TRUE)
profvis::profvis({
# Testing for missing values
for (i in 1:length(expression)) {
if(FALSE %in% complete.cases(expression[[i]])){
warning(paste("Caution: Missing data located in:", names(expression[i]), "\nMissing data is discauraged and may lead to errors"))
}
}
})
devtools::load_all("~/Documents/R/refSeeker")
library(refSeeker)
rs_loadcsvdata()
rs_loadcsvdata()
data <- rs_loadcsvdata()
rs_loadcsvdata
library(refSeeker)
rs_loadcsvdata
library(refSeeker)
rs_loadcsvdata
library(refSeeker)
rs_loadcsvdata
rs_loadcsvdata()
rs_loadtxtdata()
usethis::use_test("importerrortest")
file.choose()
library(testthat)
test_that("Basic dataset format is correct", {
expect_warning(
rs_loadcsvdata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/csverrortest/Reffinder_FFPE_error_test.csv")
)
})
test_that("BasicDataset format ", {
expect_equal(2 * 2, 4)
})
test_that("Basic dataset format is correct", {
expect_warning(
rs_loadcsvdata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/csverrortest/Reffinder_FFPE_error_test.csv"),
"Caution: Missing data located in: Reffinder_Plasma_error_test
Missing data is discauraged and may lead to errors"
)
})
test_that("Basic dataset format is correct", {
expect_warning(
rs_loadcsvdata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/csverrortest/Reffinder_FFPE_error_test.csv"),
"Caution: Missing data located in: Reffinder_Plasma_error_test
Missing data is discauraged and may lead to errors"
)
})
test_that("Basic dataset format is correct", {
expect_warning(
rs_loadcsvdata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/csverrortest/Reffinder_Plasma_error_test.txt"),
"Caution: Missing data located in: Reffinder_Plasma_error_test
Missing data is discauraged and may lead to errors"
)
})
rs_loadcsvdata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/csverrortest/Reffinder_Plasma_error_test.txt")
test_that("Basic dataset format is correct", {
expect_warning(
rs_loadcsvdata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/csverrortest/Reffinder_Plasma_error_test.txt"),
"Caution: Missing data located in: Reffinder_Plasma_error_test\nMissing data is discauraged and may lead to errors"
)
})
test_that("Basic dataset format is correct", {
expect_warning(
rs_loadcsvdata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/csverrortest/Reffinder_Plasma_error_test.txt"),
"Caution: Missing data located in: Reffinder_Plasma_error_test \nMissing data is discauraged and may lead to errors"
)
})
rs_loadcsvdata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/csverrortest/Reffinder_FFPE_error_test.csv")
# Test for non numeric columns. May indicate transposed data set, anyway errors will happen in this case
test_that("miisingDataIsCaughtWhenLoading", {
expect_warning(
rs_loadcsvdata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/csverrortest/Reffinder_FFPE_error_test.csv"),
"Non numeric columns found in: Reffinder_FFPE_error_test\nPlease make sure columns represent target RNA species and rows represent samples"
)
})
# Test for non numeric columns. May indicate transposed data set, anyway errors will happen in this case
test_that("miisingDataIsCaughtWhenLoading", {
expect_warning(
rs_loadcsvdata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/csverrortest/Reffinder_FFPE_error_test.csv"),
"Non numeric columns found in: Reffinder_FFPE_error_test \nPlease make sure columns represent target RNA species and rows represent samples"
)
})
file.choose()
rs_loadexceldata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/excel-ods-test/Reffinder_data_error_test.ods")
test_that("miisingDataIsCaughtWhenLoading", {
expect_warning(
expect_snapshot_warning(rs_loadexceldata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/excel-ods-test/Reffinder_data_error_test.ods"))
)
})
expect_warning(
expect_snapshot_warning(rs_loadexceldata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/excel-ods-test/Reffinder_data_error_test.ods"))
)
test_that("miisingDataIsCaughtWhenLoading", {
expect_warning(
expect_snapshot_warning(rs_loadexceldata("/home/patrick/OneDrive/Dokumenter/R/refSeeker/inst/exdata/excel-ods-test/Reffinder_data_error_test.ods"))
)
})
library(refSeeker)
