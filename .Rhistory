testrefpath <- dir(searchdir, pattern = "testref", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
testrefpath
testrefpath <- dir(searchdir, pattern = "/testref", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
testrefpath
testrefpath <- dir(searchdir, pattern = "testref", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
testrefpath
testrefpath <- dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
testrefpath
testrefpath <- paste0(testrefpath,"/testref")
testrefpath
expect_equal(res[[1]], read.csv(paste(testrefpath, "/rs_reffinder_df1.csv"), check.names = FALSE))
expect_equal(res[[1]], read.csv(paste(testrefpath, "/rs_reffinder_df1.csv"), check.names = FALSE))
expect_equal(res[[1]], read.csv(paste0(testrefpath, "/rs_reffinder_df1.csv"), check.names = FALSE))
test_that("reffinder works with matrices", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
write(getwd(), "~/R/testlog.txt", append = TRUE)
## For updating the reference files
# write.csv(res[[1]], "./inst/exdata/testref/rs_reffinder_df1.csv", row.names = FALSE)
# write.csv(res[[2]], "./inst/exdata/testref/rs_reffinder_df2.csv", row.names = FALSE)
## For testing the refrence files
# res[[1]] == read.csv("./inst/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE)
# res[[2]] == read.csv("./inst/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE)
## For testing using run lines
# expect_equal(res[[1]], read.csv("./inst/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE))
# expect_equal(res[[2]], read.csv("./inst/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE))
## For testing using Test button
# expect_equal(res[[1]], read.csv("../../inst/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE))
# expect_equal(res[[2]], read.csv("../../inst/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE))
## For testing using devtools::check()
# expect_equal(res[[1]], read.csv("../../refSeeker/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE))
# expect_equal(res[[2]], read.csv("../../refSeeker/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE))
expect_equal(res[[1]], read.csv(paste0(testrefpath, "/rs_reffinder_df1.csv"), check.names = FALSE))
expect_equal(res[[2]], read.csv(paste0(testrefpath, "/rs_reffinder_df2.csv"), check.names = FALSE))
})
test_that("Normfinder online script can be loaded", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
#options("HTTPUserAgent" = "RStudio Desktop (2022.7.1.554)")
# Testing purpose
## During test and check the user agent is changed to cause a server "406 not acceptable" error
#write(options("HTTPUserAgent")[[1]], "~/R/testlog.txt", append = TRUE)
#write(find.package("refSeeker", lib.loc=NULL, quiet = TRUE), "~/R/testlog.txt", append = TRUE)
res <- rs_normfinder(ct_vals)
#expect_equal (res, read.csv("../../refSeeker/exdata/testref/rs_normfindertest1.csv", check.names=FALSE))
expect_equal(res, read.csv(paste0(testrefpath, "/rs_normfindertest1.csv"), check.names = FALSE))
})
test_that("reffinder works with data.frames", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
write(getwd(), "~/R/testlog.txt", append = TRUE)
## For updating the reference files
# write.csv(res[[1]], "./inst/exdata/testref/rs_reffinder_df1.csv", row.names = FALSE)
# write.csv(res[[2]], "./inst/exdata/testref/rs_reffinder_df2.csv", row.names = FALSE)
## For testing the refrence files
# res[[1]] == read.csv("./inst/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE)
# res[[2]] == read.csv("./inst/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE)
## For testing using run lines
# expect_equal(res[[1]], read.csv("./inst/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE))
# expect_equal(res[[2]], read.csv("./inst/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE))
## For testing using Test button
# expect_equal(res[[1]], read.csv("../../inst/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE))
# expect_equal(res[[2]], read.csv("../../inst/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE))
## For testing using devtools::check()
# expect_equal(res[[1]], read.csv("../../refSeeker/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE))
# expect_equal(res[[2]], read.csv("../../refSeeker/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE))
expect_equal(res[[1]], read.csv(paste0(testrefpath, "/rs_reffinder_df1.csv"), check.names = FALSE))
expect_equal(res[[2]], read.csv(paste0(testrefpath, "/rs_reffinder_df2.csv"), check.names = FALSE))
})
testrefpath <- function(){
if(grepl("testthat", getwd(), fixed = TRUE)){
searchdir = "../../"
} else { searchdir = "."}
path <- dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
path <- paste0(testrefpath,"/testref")
return(path)
}
testrefpath()
testrefpath <- function(){
if(grepl("testthat", getwd(), fixed = TRUE)){
searchdir = "../../"
} else { searchdir = "."}
path <- dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
path <- paste0(path,"/testref")
return(path)
}
testrefpath()
expect_equal(res[[1]], read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE))
usethis::use_r("rstestfunctions")
oldwd <- getwd()
setwd("/home/patrick/OneDrive/Dokumenter/R/refSeeker.Rcheck/tests/testthat")
if(grepl("testthat", getwd(), fixed = TRUE)){
searchdir = "../../"
} else { searchdir = "."}
searchdir
dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
path
dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
searchdir
getwd()
searchdir = "../.."
dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
if(grepl("testthat", getwd(), fixed = TRUE)){
searchdir = "../.."
} else { searchdir = "."}
path <- dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
path <- paste0(path,"/testref")
path
#' find the path to the testref folder containing reffences for checking results during testing
#'
#' @return A path to testref folder
#'
#'
#'
#'
testrefpath <- function(){
if(grepl("testthat", getwd(), fixed = TRUE)){
searchdir = "../.."
} else { searchdir = "."}
path <- dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
path <- paste0(path,"/testref")
write(path[1], "~/R/testlog.txt", append = TRUE)
return(path[1])
}
testrefpath()
setwd("/home/patrick/OneDrive/Dokumenter/R/refSeeker/tests/testthat")
testrefpath()
setwd("/home/patrick/OneDrive/Dokumenter/R/refSeeker")
testrefpath()
library(refSeeker)
set.seed(100)
ct_vals <- tibble::tibble(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
View(ct_vals)
ct_vals <- tibble::tibble(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
View(ct_vals)
ct_vals <- tibble::as.tibble(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
ct_vals <- tibble::as_tibble(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
View(ct_vals)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
names(ct_vals) <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
View(ct_vals)
res <- rs_reffinder(ct_vals)
expect_equal(res[[1]], read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE))
#' find the path to the testref folder containing reffences for checking results during testing
#'
#' @return A path to testref folder
#'
#'
#'
#'
testrefpath <- function(){
if(grepl("testthat", getwd(), fixed = TRUE)){
searchdir = "../.."
} else { searchdir = "."}
path <- dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
path <- paste0(path,"/testref")
write(path[1], "~/R/testlog.txt", append = TRUE)
return(path[1])
}
expect_equal(res[[2]], read.csv(paste0(testrefpath(), "/rs_reffinder_df2.csv"), check.names = FALSE))
View(res)
res
read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE)
test_that("reffinder works with tibble", {
set.seed(100)
ct_vals <- tibble::as_tibble(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
names(ct_vals) <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
#write(getwd(), "~/R/testlog.txt", append = TRUE)
expect_equal(res[[1]], read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE))
expect_equal(res[[2]], read.csv(paste0(testrefpath(), "/rs_reffinder_df2.csv"), check.names = FALSE))
})
set.seed(100)
ct_vals <- tibble::as_tibble(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
names(ct_vals) <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
ct_vals
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
ct_vals
ct_vals <- as_tibble(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
ct_vals <- tibble::as_tibble(as.data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)))
View(ct_vals)
names(ct_vals) <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
View(ct_vals)
res <- rs_reffinder(ct_vals)
expect_equal(res[[1]], read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE))
res
read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE)
View(ct_vals)
temp <- res
View(temp)
temp <- res$stabilityTable
View(temp)
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
temp2 <- res$stabilityTable
View(temp2)
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
temp1 <- ct_vals
View(temp1)
set.seed(100)
ct_vals <- tibble::as_tibble(as.data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)))
temp3 <- ct_vals
View(temp3)
et.seed(100)
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
set.seed(100)
tb_vals <- tibble::as_tibble(as.data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)))
names(ct_vals) <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
View(tb_vals)
View(ct_vals)
tb_res <- rs_reffinder(tb_vals)
res <- rs_reffinder(ct_vals)
tb <- tb_res$stabilityTable
View(tb)
ct <- res$stabilityTable
View(ct)
ead.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv")
, check.names = FALSE)
read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE)
test_that("reffinder works with tibble", {
set.seed(100)
tb_vals <- tibble::as_tibble(as.data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)))
names(ct_vals) <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
tb_res <- rs_reffinder(tb_vals)
#write(getwd(), "~/R/testlog.txt", append = TRUE)
expect_equal(tb_res[[1]], read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE))
expect_equal(tb_res[[2]], read.csv(paste0(testrefpath(), "/rs_reffinder_df2.csv"), check.names = FALSE))
})
set.seed(100)
tb_vals <- tibble::as_tibble(as.data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)))
names(ct_vals) <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
tb_res <- rs_reffinder(tb_vals)
expect_equal(tb_res[[1]], read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE))
names(ct_vals) <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
names(tb_vals) <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
expect_equal(tb_res[[1]], read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE))
tb_res <- rs_reffinder(tb_vals)
expect_equal(tb_res[[1]], read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE))
expect_equal(tb_res[[2]], read.csv(paste0(testrefpath(), "/rs_reffinder_df2.csv"), check.names = FALSE))
test_that("reffinder works with tibble", {
set.seed(100)
tb_vals <- tibble::as_tibble(as.data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)))
names(tb_vals) <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
tb_res <- rs_reffinder(tb_vals)
#write(getwd(), "~/R/testlog.txt", append = TRUE)
expect_equal(tb_res[[1]], read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE))
expect_equal(tb_res[[2]], read.csv(paste0(testrefpath(), "/rs_reffinder_df2.csv"), check.names = FALSE))
})
test_that("reffinder works with matrices", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
write(getwd(), "~/R/testlog.txt", append = TRUE)
## For updating the reference files
# write.csv(res[[1]], "./inst/exdata/testref/rs_reffinder_df1.csv", row.names = FALSE)
# write.csv(res[[2]], "./inst/exdata/testref/rs_reffinder_df2.csv", row.names = FALSE)
## For testing the refrence files
# res[[1]] == read.csv("./inst/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE)
# res[[2]] == read.csv("./inst/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE)
## For testing using run lines
# expect_equal(res[[1]], read.csv("./inst/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE))
# expect_equal(res[[2]], read.csv("./inst/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE))
## For testing using Test button
# expect_equal(res[[1]], read.csv("../../inst/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE))
# expect_equal(res[[2]], read.csv("../../inst/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE))
## For testing using devtools::check()
# expect_equal(res[[1]], read.csv("../../refSeeker/exdata/testref/rs_reffinder_df1.csv", check.names = FALSE))
# expect_equal(res[[2]], read.csv("../../refSeeker/exdata/testref/rs_reffinder_df2.csv", check.names = FALSE))
expect_equal(res[[1]], read.csv(paste0(testrefpath(), "/rs_reffinder_df1.csv"), check.names = FALSE))
expect_equal(res[[2]], read.csv(paste0(testrefpath(), "/rs_reffinder_df2.csv"), check.names = FALSE))
})
usethis::use_test("imports")
getwd()
paste0(   testrefpath(),     "/csvtest/FFPE.csv"       )
loadeddata <- rf_loadtxtdata( paste0(   testrefpath(),     "/csvtest/FFPE.csv"       ))
library(testthat)
library(refSeeker)
loadeddata <- rf_loadtxtdata( paste0(   testrefpath(),     "/csvtest/FFPE.csv"       ))
loadeddata <- rs_loadtxtdata( paste0(   testrefpath(),     "/csvtest/FFPE.csv"       ))
testrefpath()
testrefpath()
#' find the path to the testref folder containing reffences for checking results during testing
#'
#' @return A path to testref folder
#'
#'
#'
#'
testrefpath <- function(){
if(grepl("testthat", getwd(), fixed = TRUE)){
searchdir = "../.."
} else { searchdir = "."}
path <- dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
#path <- paste0(path,"/testref")
#write(path[1], "~/R/testlog.txt", append = TRUE)
return(path[1])
}
testrefpath()
test_that("Normfinder online script can be loaded", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
#options("HTTPUserAgent" = "RStudio Desktop (2022.7.1.554)")
# Testing purpose
## During test and check the user agent is changed to cause a server "406 not acceptable" error
#write(options("HTTPUserAgent")[[1]], "~/R/testlog.txt", append = TRUE)
#write(find.package("refSeeker", lib.loc=NULL, quiet = TRUE), "~/R/testlog.txt", append = TRUE)
res <- rs_normfinder(ct_vals)
#expect_equal (res, read.csv("../../refSeeker/exdata/testref/rs_normfindertest1.csv", check.names=FALSE))
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_normfindertest1.csv"), check.names = FALSE))
})
loadeddata <- rs_loadtxtdata( paste0(   testrefpath(),     "/csvtest/FFPE.csv"       ))
loadeddata
read.csv(paste0(testrefpath(), "/testref/rf_loadtxtdata.txt"), check.names = FALSE)
read.csv(paste0(testrefpath(), "/testref/rS_loadtxtdata.txt"), check.names = FALSE)
read.csv(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"), check.names = FALSE)
read.csv(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"), check.names = FALSE, row.names = FALSE)
expect_equal(capture.output(loadeddata), read.csv(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"), check.names = FALSE) )
capture.output(loadeddata)
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"), check.names = FALSE) )
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
test_that("imports works for csv", {
## rs_loadtxtdata
loadeddata <- rs_loadtxtdata( paste0(   testrefpath(),     "/csvtest/FFPE.csv"       ))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
})
readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"))
capture.output(loadeddata)
loadeddata <- rs_loadtxtdata( paste0(   testrefpath(),     "/csvtest/FFPE.csv"       ))
loadeddata <- rs_loadtxtdata( paste0(   testrefpath(),     "/csvtest/FFPE.csv"       ))
loadeddata
# Create refference file
write.csv(loadeddata, testrefpath(), "/testref/rs_loadtxtdata.txt"), row.names = FALSE)
# Create refference file
write.csv(loadeddata, testrefpath(), "/testref/rs_loadtxtdata.txt", row.names = FALSE)
# Create refference file
writeLines(loadeddata, testrefpath(), "/testref/rs_loadtxtdata.txt", row.names = FALSE)
# Create refference file
writeLines(loadeddata, testrefpath(), "/testref/rs_loadtxtdata.txt")
# Create refference file
writeLines(capture.output(loadeddata), testrefpath(), "/testref/rs_loadtxtdata.txt")
# Create refference file
writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
test_that("imports works for csv", {
## rs_loadtxtdata
loadeddata <- rs_loadtxtdata( paste0(   testrefpath(),     "/csvtest/FFPE.csv"       ))
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
})
loadeddata <- rs_loadtxtdata( paste0(testrefpath(), "/tsvtest/FFPE.tsv") )
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
test_that("imports works for tsv", {
## rs_loadtxtdata
loadeddata <- rs_loadtxtdata( paste0(testrefpath(), "/tsvtest/FFPE.tsv") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
})
test_that("imports works for txt", {
## rs_loadtxtdata
loadeddata <- rs_loadtxtdata( paste0(testrefpath(), "/txttest/FFPE.txt") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
})
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
})
expect_equal(capture.output(as.data.frame(loadeddata)), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
as.data.frame(loadeddata)
loadeddata
writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/Reffinder_data_test.xlsx")) )
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
})
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
})
capture.output(loadeddata)
loadeddata
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
})
writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"), useBytes = TRUE)
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"), useBytes = TRUE)
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
})
as.data.frame( loadeddata[1] )
loadeddata[1] <- as.data.frame( loadeddata[1] )
loadeddata[1]
loadeddata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
loadeddata
loadeddata[[1]] <- as.data.frame( loadeddata[[1]] )
loadeddata
loadeddata[[1:3]] <- as.data.frame( loadeddata[[1:3]] )
loadeddata
as.data.frame( loadeddata[[1:3]] )
as.data.frame( loadeddata[1:3] )
loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
loadeddata[[1]] <- as.data.frame( loadeddata[[1]] )
loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
})
loadeddata[[1]],3)
round(loadeddata[[1]],3)
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# loadeddata[[1]] <- as.data.frame( round(loadeddata[[1]][1:ncol],3) )
# loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
# loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
# Create refference file
writeLines(capture.output(loadeddata[[1]]), paste0(testrefpath(), "/testref/rs_loadexceldata1.txt"))
writeLines(capture.output(loadeddata[[2]]), paste0(testrefpath(), "/testref/rs_loadexceldata2.txt"))
expect_equal(capture.output(loadeddata[[1]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata1.txt")) )
expect_equal(capture.output(loadeddata[[2]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata2.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# loadeddata[[1]] <- as.data.frame( round(loadeddata[[1]][1:ncol],3) )
# loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
# loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
# Create refference file
writeLines(capture.output(loadeddata[[1]]), paste0(testrefpath(), "/testref/rs_loadexceldata1.txt"))
writeLines(capture.output(loadeddata[[2]]), paste0(testrefpath(), "/testref/rs_loadexceldata2.txt"))
expect_equal(capture.output(loadeddata[[1]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata1.txt")) )
expect_equal(capture.output(loadeddata[[2]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata2.txt")) )
})
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# loadeddata[[1]] <- as.data.frame( round(loadeddata[[1]][1:ncol],3) )
# loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
# loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
# Create refference file
writeLines(capture.output(loadeddata[[1]]), paste0(testrefpath(), "/testref/rs_loadexceldata1.txt"))
writeLines(capture.output(loadeddata[[2]]), paste0(testrefpath(), "/testref/rs_loadexceldata2.txt"))
writeLines(capture.output(loadeddata[[3]]), paste0(testrefpath(), "/testref/rs_loadexceldata3.txt"))
expect_equal(capture.output(loadeddata[[1]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata1.txt")) )
expect_equal(capture.output(loadeddata[[2]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata2.txt")) )
expect_equal(capture.output(loadeddata[[3]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata3.txt")) )
})
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# loadeddata[[1]] <- as.data.frame( round(loadeddata[[1]][1:ncol],3) )
# loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
# loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
# Create refference file
# writeLines(capture.output(loadeddata[[1]]), paste0(testrefpath(), "/testref/rs_loadexceldata1.txt"))
# writeLines(capture.output(loadeddata[[2]]), paste0(testrefpath(), "/testref/rs_loadexceldata2.txt"))
# writeLines(capture.output(loadeddata[[3]]), paste0(testrefpath(), "/testref/rs_loadexceldata3.txt"))
expect_equal(capture.output(loadeddata[[1]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata1.txt")) )
expect_equal(capture.output(loadeddata[[2]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata2.txt")) )
expect_equal(capture.output(loadeddata[[3]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata3.txt")) )
})
