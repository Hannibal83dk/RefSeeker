colors <- colortable
order <- unique(rftable$Target)
colors
colors[1] <- factor(colors[1], levels = order)
colors
View(colors)
colors <- colortable
order <- unique(rftable$Target)
colors[1] <- factor(colors[[1]], levels = order)
colors[order(colors[1]), ]
colors
colors[1]
colors <- colortable
order <- unique(rftable$Target)
colors[,1] <- factor(colors[,1], levels = order)
colors[order(colors[1]), ]
colors
colortable
colortable <- data.frame(Target = names(data$FFPE))
colortable$color <- c("#2271b2", "#2271b2",  "#2271b2", "#2271b2","#359b73", "#d55e00", "#d55e00", "#d55e00", "#d55e00", "#d55e00")
colortable
colors <- colortable
colors
colors <- colortable
colors
order <- unique(rftable$Target)
names(colors) <- c("target", "color")
colors <- colortable
order <- unique(rftable$Target)
names(colors) <- c("target", "color")
colors$target <- factor(colors$target, levels = order)
colors <- colors[ order(colors$target) , ]
colors <- colors$color
colors
length(colors) == length(unique(rftable$Target))
if( length(colors) == length(unique(rftable$Target)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
p <- p + ggplot2::scale_fill_manual(values=colors)
p
colortable
colors
colors <- colortable
colors
order <- unique(rftable$Target)
order
names(colors) <- c("target", "color")
colors
colors$target <- factor(colors$target, levels = order)
colors
order(colors$target)
colors <- colors[ order(colors$target) , ]
colors
colors <- colors$color
colors
p <- ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "Target")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none")
p <- p + ggplot2::scale_fill_manual(values=colors)
print( p )
colors
colors <- colortable
colors <- colors$color
p <- ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "Target")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none")
if( length(colors) == length(unique(rftable$Target)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
print( p )
ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "Target")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none") +
ggplot2::scale_fill_manual(values=c("#2271b2", "#2271b2",  "#2271b2", "#2271b2","#359b73", "#d55e00", "#d55e00", "#d55e00", "#d55e00", "#d55e00")
if(is.data.frame(colors)){
ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "Target")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none") +
ggplot2::scale_fill_manual(values=c("#2271b2", "#2271b2",  "#2271b2", "#2271b2","#359b73", "#d55e00", "#d55e00", "#d55e00", "#d55e00", "#d55e00"))
ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "Target")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none") +
ggplot2::scale_fill_manual(values=c("#000000", "#2271b2",  "#2271b2", "#2271b2","#359b73", "#d55e00", "#d55e00", "#d55e00", "#d55e00", "#d55e00"))
ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "Target")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none") +
ggplot2::scale_fill_manual(values=c("#000000", "#000000",  "#2271b2", "#2271b2","#359b73", "#d55e00", "#d55e00", "#d55e00", "#d55e00", "#d55e00"))
ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability')) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none") +
ggplot2::scale_fill_manual(values=c("#000000", "#000000",  "#2271b2", "#2271b2","#359b73", "#d55e00", "#d55e00", "#d55e00", "#d55e00", "#d55e00"))
ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "Target")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none") +
ggplot2::scale_fill_manual(values=c("#000000", "#000000",  "#2271b2", "#2271b2","#359b73", "#d55e00", "#d55e00", "#d55e00", "#d55e00", "#d55e00"))
rftable
ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "TargetID")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none") +
ggplot2::scale_fill_manual(values=c("#000000", "#000000",  "#2271b2", "#2271b2","#359b73", "#d55e00", "#d55e00", "#d55e00", "#d55e00", "#d55e00"))
p <- ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "TargetID")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none")
colors <- colortable
order <- unique(rftable$Target)
names(colors) <- c("target", "color")
colors$target <- factor(colors$target, levels = order)
colors <- colors[ order(colors$target) , ]
colors <- colors$color
if(is.data.frame(colors)){
colors <- colortable
order <- unique(rftable$Target)
names(colors) <- c("target", "color")
colors$target <- factor(colors$target, levels = order)
colors <- colors[ order(colors$target) , ]
colors <- colors$color
}
colors
if( length(colors)==1 && colors=="" ){
p <- p + ggplot2::scale_fill_manual(values=c( rep("grey45" , length(unique(rftable$Target))) ))
}
if(length(colors)==1 && colors !=""){
p <- p + ggplot2::scale_fill_manual(values=c( rep(colors , length(unique(rftable$Target))) ))
}
if( length(colors) == length(unique(rftable$Target)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
print( p )
library(refSeeker)
rs_graph(refseekerlist)
rs_graph(refseekerlist, colors = colortable)
library(refSeeker)
data <- rs_load.table()
res <- rs_reffinder(data)
rs_graph(res)
rlang::last_error()
res <- rs_reffinder(data$FFPE)
res <- rs_reffinder(data)
rs_graph(res$Fresh_frozen)
rs_graph(res$Fresh_frozen, colors = "red")
res
coldict <- data.frame(target = names(data$Fresh_frozen))
coldict
coldict$color <- c("red", "red", "green", "green", "blue")
coldict
rs_graph(res$Fresh_frozen, colors = coldict)
rs_graph(res$Fresh_frozen, colors = coldict)
library(refSeeker)
rs_graph(res$Fresh_frozen, colors = coldict)
rs_graph(res, colors = coldict)
library(refSeeker)
rs_graph(res, colors = coldict)
library(refSeeker)
rs_graph(res, colors = coldict)
rs_graph(res$Fresh_frozen, colors = coldict)
rs_graph(res, colors = coldict, forceSingle = TRUE)
rs_graph2 <- function (refseekerlist, filename = "", filetype = "png",
forceSingle = FALSE, width, height, units = "px", res = 250,
ordering = "Comprehensive Rank")
{
if (!is.null(refseekerlist$stabilityTable)) {
cat("simplelist, only one dataset\n")
name <- deparse(substitute(refseekerlist))
refseekerlist <- list(refseekerlist)
cat("\nrefseekerlist converted\n")
cat(name)
names(refseekerlist) <- gsub("_", " ", name)
cat("\nrefseekerlist renamed\n")
}
if (!is.null(refseekerlist[[1]]$stabilityTable)) {
cat("list of lists, maybe more than one dataset\n")
names(refseekerlist) <- gsub("_", " ", names(refseekerlist))
if (forceSingle == FALSE) {
if (filename != "") {
if (missing(width)) {
width = length(refseekerlist) * 675
cat(paste("width set to", width, "\n"))
}
if (missing(height)) {
height = 2156
cat(paste("height set to", height, "\n"))
}
}
return(list(refseekerlist, filename, width = width, height = height, units = units, res = res, ordering = ordering, filetype = filetype))
}
else {
names <- names(refseekerlist)
if (missing(width)) {
width = 675
}
if (missing(height)) {
height = 2156
}
for (i in 1:length(names)) {
cat(names[i])
cat("\n")
rsgraphdraw(refseekerlist[i], paste0(filename,
"_", gsub(" ", "_", names[i])),
width = width, height = height, units = "px",
res = 250, ordering = ordering, filetype = filetype)
}
}
}
}
params <- rs_graph2(res, colors = coldict)
rs_graph2 <- function (refseekerlist, filename = "", filetype = "png",
forceSingle = FALSE, width, height, units = "px", res = 250,
ordering = "Comprehensive Rank", colors = "")
{
if (!is.null(refseekerlist$stabilityTable)) {
cat("simplelist, only one dataset\n")
name <- deparse(substitute(refseekerlist))
refseekerlist <- list(refseekerlist)
cat("\nrefseekerlist converted\n")
cat(name)
names(refseekerlist) <- gsub("_", " ", name)
cat("\nrefseekerlist renamed\n")
}
if (!is.null(refseekerlist[[1]]$stabilityTable)) {
cat("list of lists, maybe more than one dataset\n")
names(refseekerlist) <- gsub("_", " ", names(refseekerlist))
if (forceSingle == FALSE) {
if (filename != "") {
if (missing(width)) {
width = length(refseekerlist) * 675
cat(paste("width set to", width, "\n"))
}
if (missing(height)) {
height = 2156
cat(paste("height set to", height, "\n"))
}
}
return(list(refseekerlist, filename, width = width, height = height, units = units, res = res, ordering = ordering, filetype = filetype, colors = colors))
}
else {
names <- names(refseekerlist)
if (missing(width)) {
width = 675
}
if (missing(height)) {
height = 2156
}
for (i in 1:length(names)) {
cat(names[i])
cat("\n")
rsgraphdraw(refseekerlist[i], paste0(filename,
"_", gsub(" ", "_", names[i])),
width = width, height = height, units = "px",
res = 250, ordering = ordering, filetype = filetype)
}
}
}
}
params <- rs_graph2(res, colors = coldict)
params <- rs_graph2(res, colors = coldict)
rs_graph2 <- function (refseekerlist, filename = "", filetype = "png",
forceSingle = FALSE, width, height, units = "px", res = 250,
ordering = "Comprehensive Rank", colors = "")
{
if (!is.null(refseekerlist$stabilityTable)) {
cat("simplelist, only one dataset\n")
name <- deparse(substitute(refseekerlist))
refseekerlist <- list(refseekerlist)
cat("\nrefseekerlist converted\n")
cat(name)
names(refseekerlist) <- gsub("_", " ", name)
cat("\nrefseekerlist renamed\n")
}
if (!is.null(refseekerlist[[1]]$stabilityTable)) {
cat("list of lists, maybe more than one dataset\n")
names(refseekerlist) <- gsub("_", " ", names(refseekerlist))
if (forceSingle == FALSE) {
#      if (filename != "") {
if (missing(width)) {
width = length(refseekerlist) * 675
cat(paste("width set to", width, "\n"))
}
if (missing(height)) {
height = 2156
cat(paste("height set to", height, "\n"))
}
#      }
return(list(refseekerlist, filename, width = width, height = height, units = units, res = res, ordering = ordering, filetype = filetype, colors = colors))
}
else {
names <- names(refseekerlist)
if (missing(width)) {
width = 675
}
if (missing(height)) {
height = 2156
}
for (i in 1:length(names)) {
cat(names[i])
cat("\n")
rsgraphdraw(refseekerlist[i], paste0(filename,
"_", gsub(" ", "_", names[i])),
width = width, height = height, units = "px",
res = 250, ordering = ordering, filetype = filetype)
}
}
}
}
params <- rs_graph2(res, colors = coldict)
params
refseekerlist <- params[[1]]
filename <- params[[2]]
width <- params$width
height <- params$height
colors = params$colors
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop(
cat("function stopped due to ggplot2"),
"Package \"ggplot2\" must be installed to use this function.",
call. = FALSE
)
}
!requireNamespace("ggplot2", quietly = TRUE)
print(refseekerlist)
if(ordering[1] != "Targetorder"){
for (i in 1:length(refseekerlist)) {
algonames <- names(refseekerlist[[i]]$stabilityTable)
sortcol <- which(algonames == ordering[1])
refseekerlist[[i]]$stabilityTable <- refseekerlist[[i]]$stabilityTable[order(refseekerlist[[i]]$stabilityTable[,sortcol]),]
}
}
ordering = params$ordering
if(ordering[1] != "Targetorder"){
for (i in 1:length(refseekerlist)) {
algonames <- names(refseekerlist[[i]]$stabilityTable)
sortcol <- which(algonames == ordering[1])
refseekerlist[[i]]$stabilityTable <- refseekerlist[[i]]$stabilityTable[order(refseekerlist[[i]]$stabilityTable[,sortcol]),]
}
}
rftable <- data.frame()
## Adding specific identifiers for each stability value
if(is.null(names(refseekerlist))){ # Target names have not been provided
# Add identifier to tables and add them to the new rftable
## If dataset are not named, use ID numbers
for (i in 1:length(refseekerlist)) {
# Add identifier
refseekerlist[[i]]$stabilityTable$dataID <- paste0("ID_", i)
# Add the tables to the rftable
rftable <- rbind(rftable, refseekerlist[[i]]$stabilityTable)
}
} else{ # Target names have been provided
# Add identifier to tables and add them to the new rftable
for (i in 1:length(refseekerlist)) {
# Add identifier
refseekerlist[[i]]$stabilityTable$dataID <- names(refseekerlist)[i]
# Add the tables to the rftable
rftable <- rbind(rftable,refseekerlist[[i]]$stabilityTable)
}
}
# Create a holder for the algorithms list
algorithmlist <- names(rftable[2:6])
# Rename targets in each table by adding identifier (normally tissue type)
## necessary for arranging the graphs x-axis individually
rftable$TargetID <- paste(rftable$Target, "__", rftable$dataID, sep = "")
# Factorize each target based on the unique identifier
rftable$TargetID <- factor(rftable$TargetID, levels = rftable$TargetID)
# Melt the table
rftable <- reshape2::melt(rftable, c(names(rftable[1]), "dataID", "TargetID"),
measure.vars = algorithmlist,
variable.name = "algorithm",
value.name = "Stability"
)
# Factorize the algorithms for ordering in the graph
rftable$algorithm <- factor(rftable$algorithm, algorithmlist)
rftable$Stability <- as.numeric(rftable$Stability)
# Remove incomplete entries, should not be necessary
rftable <- rftable[stats::complete.cases(rftable),]
# Create ghost data frame to hold invisible values for setting the first 4 rows max value to the same value
ghostframe <- rftable
p <- ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "TargetID")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none")
library(ggplot2)
# Create ghost data frame to hold invisible values for setting the first 4 rows max value to the same value
ghostframe <- rftable
p <- ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "TargetID")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none")
p
is.data.frame(colors)
is.data.frame(colors)
order <- unique(rftable$Target)
order
View(rftable)
View(rftable)
View(rftable)
der <- unique(rftable
rftable
rs_graph(res, colors = coldict, forceSingle = TRUE, ordering = "delte-Ct")
rs_graph(res, colors = coldict, forceSingle = TRUE, ordering = "delta-Ct")
rs_graph(res, colors = coldict, forceSingle = TRUE, ordering = "BestKeeper")
rs_graph(res, colors = coldict, forceSingle = TRUE, ordering = "Normfinder")
rs_graph(res, colors = coldict, forceSingle = TRUE)
rs_graph(res, colors = coldict, forceSingle = TRUE, ordering = "BestKeeper")
unique(rftable$Target)
order <- unique(rftable$TargetID)
order
names(colors) <- c("target", "color")
colors
temp <- rftable$algorithm == "Comprehensive Rank"
temp
temp <- rftable[rftable$algorithm == "Comprehensive Rank"]
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp
temp <- temp$Target
temp
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp <- temp[1]
temp
colors
nrow(temp)
