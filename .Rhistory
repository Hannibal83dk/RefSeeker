# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('Stability', 'TargetID'), ghostframe, alpha = 0) +
ggplot2::facet_grid(dataID ~ algorithm,  scales = "free") +
ggplot2::scale_y_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.5)) +
ggplot2::xlab("Stability value") +
ggplot2::ylab("Target") +
ggplot2::theme(legend.position="none")
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$Target)) ){
colors <- data.frame(target = unique(rftable$Target[order(rftable$Target)]),
color = colors)
message("Please note colors has been applied to tagets based on factorization. \nThis factorization is likely provided by the rs_reffinder() function and obtained based on appearence of targets in the input data. \nIf multiple datasets are provided and a multigraph has been selected, a custom color scheme can be provided by a full lenght color vector.")
}
if(is.data.frame(colors)){
#colors <- colortable
#order <- unique(rftable$TargetID)
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp$color <- NA
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
#names(colors) <- c("target", "color")
#colors$target <- factor(colors$target, levels = order)
#colors <- colors[ order(colors$target) , ]
colors <- temp$color
}
# If no colors are provided the default empty string still counts as one
if( length(colors)==1 && colors=="" ){
p <- p + ggplot2::scale_fill_manual(values=c( rep("grey45" , length(unique(rftable$TargetID))) ))
}
# One color provided meaning all bars should have this color
if(length(colors)==1 && colors !=""){
p <- p + ggplot2::scale_fill_manual(values=c( rep(colors , length(unique(rftable$TargetID))) ))
}
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$TargetID)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
print( p )
colorframe <- data.frame(matrix(nrow = 10, ncol = 2))
names(colorframe) <- c("Target", "color")
colorframe
results
colorframe$Target <- results$Fresh_Frozen$stabilityTable$Target
colorframe
data <- rs_loaddata()
results <- rs_reffinder(data)
colorframe$Target <- results$Fresh_Frozen$stabilityTable$Target
colorframe
colorframe[order(colorframe$Target),]
colorframe$color <- c("#cFcfcf", "#666666", "#0F0F0F")
colorframe$color <- c("#cFcfcf", "#666666", "#0F0F0F", , "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F")
colorframe$color <- c("#cFcfcf", "#666666", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F")
colorframe
params <- rs_graph2(results)
refseekerlist <- params[[1]]
filename <- params[[2]]
width <- params$width
height <- params$height
params
params$colors
height <- params$height
colors = params$colors
ordering = params$ordering
colors <- colorframe
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$Target)) ){
colors <- data.frame(target = unique(rftable$Target[order(rftable$Target)]),
color = colors)
message("Please note colors has been applied to tagets based on factorization. \nThis factorization is likely provided by the rs_reffinder() function and obtained based on appearence of targets in the input data. \nIf multiple datasets are provided and a multigraph has been selected, a custom color scheme can be provided by a full lenght color vector.")
}
if(is.data.frame(colors)){
#colors <- colortable
#order <- unique(rftable$TargetID)
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp$color <- NA
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
#names(colors) <- c("target", "color")
#colors$target <- factor(colors$target, levels = order)
#colors <- colors[ order(colors$target) , ]
colors <- temp$color
}
# If no colors are provided the default empty string still counts as one
if( length(colors)==1 && colors=="" ){
p <- p + ggplot2::scale_fill_manual(values=c( rep("grey45" , length(unique(rftable$TargetID))) ))
}
# One color provided meaning all bars should have this color
if(length(colors)==1 && colors !=""){
p <- p + ggplot2::scale_fill_manual(values=c( rep(colors , length(unique(rftable$TargetID))) ))
}
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$TargetID)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
print( p )
is.data.frame(colors)
#order <- unique(rftable$TargetID)
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp
temp$color <- NA
temp
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
nrow(colors)
nrow(temp)
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop(
cat("function stopped due to ggplot2"),
"Package \"ggplot2\" must be installed to use this function.",
call. = FALSE
)
}
#print(refseekerlist)
#if(ordering[1] != "Targetorder"){
for (i in 1:length(refseekerlist)) {
algonames <- names(refseekerlist[[i]]$stabilityTable)
sortcol <- which(algonames == ordering[1])
refseekerlist[[i]]$stabilityTable <- refseekerlist[[i]]$stabilityTable[order(refseekerlist[[i]]$stabilityTable[,sortcol]),]
}
#}
rftable <- data.frame()
## Adding specific identifiers for each stability value
if(is.null(names(refseekerlist))){ # Target names have not been provided
# Add identifier to tables and add them to the new rftable
## If dataset are not named, use ID numbers
for (i in 1:length(refseekerlist)) {
# Add identifier
refseekerlist[[i]]$stabilityTable$dataID <- paste0("ID_", i)
# Add the tables to the rftable
rftable <- rbind(rftable, refseekerlist[[i]]$stabilityTable)
}
} else{ # Target names have been provided
# Add identifier to tables and add them to the new rftable
for (i in 1:length(refseekerlist)) {
# Add identifier
refseekerlist[[i]]$stabilityTable$dataID <- names(refseekerlist)[i]
# Add the tables to the rftable
rftable <- rbind(rftable,refseekerlist[[i]]$stabilityTable)
}
}
# Create a holder for the algorithms list
algorithmlist <- names(rftable[2:6])
# Rename targets in each table by adding identifier (normally tissue type)
## necessary for arranging the graphs x-axis individually
rftable$TargetID <- paste(rftable$Target, "__", rftable$dataID, sep = "")
# Factorize each target based on the unique identifier
rftable$TargetID <- factor(rftable$TargetID, levels = rftable$TargetID)
# Melt the table
rftable <- reshape2::melt(rftable, c(names(rftable[1]), "dataID", "TargetID"),
measure.vars = algorithmlist,
variable.name = "algorithm",
value.name = "Stability"
)
# Factorize the algorithms for ordering in the graph
rftable$algorithm <- factor(rftable$algorithm, algorithmlist)
rftable$Stability <- as.numeric(rftable$Stability)
# Remove incomplete entries, should not be necessary
rftable <- rftable[stats::complete.cases(rftable),]
# Create ghost data frame to hold invisible values for setting the first 4 rows max value to the same value
ghostframe <- rftable
#ghostframe$Stability <- 3
p <- ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability', fill = "TargetID")) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value") +
ggplot2::xlab("Target") +
ggplot2::theme(legend.position="none")
#ggplot2::scale_fill_manual(values=c("#000000", "#000000",  "#2271b2", "#2271b2","#359b73", "#d55e00", "#d55e00", "#d55e00", "#d55e00", "#d55e00"))
############################################
p <- ggplot2::ggplot(rftable, ggplot2::aes_string('Stability', 'TargetID', fill = "TargetID")) +
ggplot2::geom_bar (stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('Stability', 'TargetID'), ghostframe, alpha = 0) +
ggplot2::facet_grid(dataID ~ algorithm,  scales = "free") +
ggplot2::scale_y_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=0.5)) +
ggplot2::xlab("Stability value") +
ggplot2::ylab("Target") +
ggplot2::theme(legend.position="none")
#############################################
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$Target)) ){
colors <- data.frame(target = unique(rftable$Target[order(rftable$Target)]),
color = colors)
message("Please note colors has been applied to tagets based on factorization. \nThis factorization is likely provided by the rs_reffinder() function and obtained based on appearence of targets in the input data. \nIf multiple datasets are provided and a multigraph has been selected, a custom color scheme can be provided by a full lenght color vector.")
}
if(is.data.frame(colors)){
#colors <- colortable
#order <- unique(rftable$TargetID)
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp$color <- NA
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
#names(colors) <- c("target", "color")
#colors$target <- factor(colors$target, levels = order)
#colors <- colors[ order(colors$target) , ]
colors <- temp$color
}
# If no colors are provided the default empty string still counts as one
if( length(colors)==1 && colors=="" ){
p <- p + ggplot2::scale_fill_manual(values=c( rep("grey45" , length(unique(rftable$TargetID))) ))
}
# One color provided meaning all bars should have this color
if(length(colors)==1 && colors !=""){
p <- p + ggplot2::scale_fill_manual(values=c( rep(colors , length(unique(rftable$TargetID))) ))
}
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$TargetID)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
print( p )
colors
length(colors)==1 && colors==""
temp
is.data.frame(colors)
is.data.frame(colors)
#order <- unique(rftable$TargetID)
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp
temp$color <- NA
temp
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
View(colorframe)
p
length(colors)
colors
is.data.frame(colors)
#order <- unique(rftable$TargetID)
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp$color <- NA
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
j
i
temp$Target[j]
colors$target[i]
colors
names()colors[1] <- "target"
names(colors[1]) <- "target"
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
temp$Target[j]
colors$target[i]
colors
names(colors)[1] <- "target"
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
colors
temp
colors <- temp$color
# If no colors are provided the default empty string still counts as one
if( length(colors)==1 && colors=="" ){
p <- p + ggplot2::scale_fill_manual(values=c( rep("grey45" , length(unique(rftable$TargetID))) ))
}
# One color provided meaning all bars should have this color
if(length(colors)==1 && colors !=""){
p <- p + ggplot2::scale_fill_manual(values=c( rep(colors , length(unique(rftable$TargetID))) ))
}
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$TargetID)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
print( p )
colors
colorframe
colorframe[order(colorframe$Target),]
colorframe <- colorframe[order(colorframe$Target),]
colorframe
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$Target)) ){
colors <- data.frame(target = unique(rftable$Target[order(rftable$Target)]),
color = colors)
message("Please note colors has been applied to tagets based on factorization. \nThis factorization is likely provided by the rs_reffinder() function and obtained based on appearence of targets in the input data. \nIf multiple datasets are provided and a multigraph has been selected, a custom color scheme can be provided by a full lenght color vector.")
}
if(is.data.frame(colors)){
#colors <- colortable
#order <- unique(rftable$TargetID)
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp$color <- NA
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
#names(colors) <- c("target", "color")
#colors$target <- factor(colors$target, levels = order)
#colors <- colors[ order(colors$target) , ]
colors <- temp$color
}
# If no colors are provided the default empty string still counts as one
if( length(colors)==1 && colors=="" ){
p <- p + ggplot2::scale_fill_manual(values=c( rep("grey45" , length(unique(rftable$TargetID))) ))
}
# One color provided meaning all bars should have this color
if(length(colors)==1 && colors !=""){
p <- p + ggplot2::scale_fill_manual(values=c( rep(colors , length(unique(rftable$TargetID))) ))
}
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$TargetID)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
print( p )
colors
# If no colors are provided the default empty string still counts as one
if( length(colors)==1 && colors=="" ){
p <- p + ggplot2::scale_fill_manual(values=c( rep("grey45" , length(unique(rftable$TargetID))) ))
}
# One color provided meaning all bars should have this color
if(length(colors)==1 && colors !=""){
p <- p + ggplot2::scale_fill_manual(values=c( rep(colors , length(unique(rftable$TargetID))) ))
}
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$TargetID)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
length(colors)
length(unique(rftable$TargetID))
colorframe$color <- c("#cFcfcf", "#666666", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F", "#0F0F0F")
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$Target)) ){
colors <- data.frame(target = unique(rftable$Target[order(rftable$Target)]),
color = colors)
message("Please note colors has been applied to tagets based on factorization. \nThis factorization is likely provided by the rs_reffinder() function and obtained based on appearence of targets in the input data. \nIf multiple datasets are provided and a multigraph has been selected, a custom color scheme can be provided by a full lenght color vector.")
}
if(is.data.frame(colors)){
#colors <- colortable
#order <- unique(rftable$TargetID)
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp$color <- NA
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
#names(colors) <- c("target", "color")
#colors$target <- factor(colors$target, levels = order)
#colors <- colors[ order(colors$target) , ]
colors <- temp$color
}
# If no colors are provided the default empty string still counts as one
if( length(colors)==1 && colors=="" ){
p <- p + ggplot2::scale_fill_manual(values=c( rep("grey45" , length(unique(rftable$TargetID))) ))
}
# One color provided meaning all bars should have this color
if(length(colors)==1 && colors !=""){
p <- p + ggplot2::scale_fill_manual(values=c( rep(colors , length(unique(rftable$TargetID))) ))
}
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$TargetID)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
print( p )
colorframe
if(is.data.frame(colors)){
#colors <- colortable
#order <- unique(rftable$TargetID)
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp$color <- NA
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
#names(colors) <- c("target", "color")
#colors$target <- factor(colors$target, levels = order)
#colors <- colors[ order(colors$target) , ]
colors <- temp$color
}
colors
colors <- colorframe
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$Target)) ){
colors <- data.frame(target = unique(rftable$Target[order(rftable$Target)]),
color = colors)
message("Please note colors has been applied to tagets based on factorization. \nThis factorization is likely provided by the rs_reffinder() function and obtained based on appearence of targets in the input data. \nIf multiple datasets are provided and a multigraph has been selected, a custom color scheme can be provided by a full lenght color vector.")
}
if(is.data.frame(colors)){
#colors <- colortable
#order <- unique(rftable$TargetID)
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp$color <- NA
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
#names(colors) <- c("target", "color")
#colors$target <- factor(colors$target, levels = order)
#colors <- colors[ order(colors$target) , ]
colors <- temp$color
}
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$TargetID)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
print( p )
temp$Target[j]
colors$target[i]
colors
names(colorframe) <- c("target", "color")
colors <- colorframe
colors
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$Target)) ){
colors <- data.frame(target = unique(rftable$Target[order(rftable$Target)]),
color = colors)
message("Please note colors has been applied to tagets based on factorization. \nThis factorization is likely provided by the rs_reffinder() function and obtained based on appearence of targets in the input data. \nIf multiple datasets are provided and a multigraph has been selected, a custom color scheme can be provided by a full lenght color vector.")
}
if(is.data.frame(colors)){
#colors <- colortable
#order <- unique(rftable$TargetID)
temp <- rftable[rftable$algorithm == "Comprehensive Rank", ]
temp$color <- NA
for (i in 1:nrow(colors)) {
for (j in 1:nrow(temp)) {
if(  temp$Target[j] == colors$target[i] ){
temp$color[j] = colors$color[i]
}
}
}
#names(colors) <- c("target", "color")
#colors$target <- factor(colors$target, levels = order)
#colors <- colors[ order(colors$target) , ]
colors <- temp$color
}
# If no colors are provided the default empty string still counts as one
if( length(colors)==1 && colors=="" ){
p <- p + ggplot2::scale_fill_manual(values=c( rep("grey45" , length(unique(rftable$TargetID))) ))
}
# One color provided meaning all bars should have this color
if(length(colors)==1 && colors !=""){
p <- p + ggplot2::scale_fill_manual(values=c( rep(colors , length(unique(rftable$TargetID))) ))
}
# A set of custom colors was provided as a vector
if( length(colors) == length(unique(rftable$TargetID)) ){
p <- p + ggplot2::scale_fill_manual(values=colors)
}
print( p )
remove.packages("qpdf", lib="/usr/lib/R/site-library")
install.packages(c("data.table", "digest", "sys", "yaml"))
remove.packages("qpdf", lib="/usr/lib/R/site-library")
remove.packages("qpdf", lib="/usr/lib/R/site-library")
remove.packages("qpdf", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
remove.packages("qpdf", lib="/usr/lib/R/site-library")
remove.packages("qpdf", lib="/usr/lib/R/site-library")
library(refSeeker)
answer <- rsdialog()
answer
outdir <- answer[2]
datalist <- rs_loaddata(answer[7:length(answer)])
results <- rs_reffinder(datalist)
answer[5] != "none"
answer[2]
library(refSeeker)
rs_wizard()
