ft <- add_header_row(ft,
values = c("Target",  "Avg. STDEV.", "Rank", "MAD", "Rank", "Stability", "Rank", "Avg.M", "Rank", "Geom. mean value", "Rank" ))
ft
delete_part(ft, part = "col.keys")
Cancer <- read.table("http://users.stat.ufl.edu/~aa/cat/data/Cancer.dat",
header = TRUE, stringsAsFactors = TRUE)
library(dplyr)
library(tidyr)
library(scales)
library(flextable)
cancerCountWide <- Cancer %>%
select(-risktime) %>%
pivot_wider(id = time, names_from = c(histology, stage),
values_from=count) %>%
mutate(`histo` = " ") %>%
select(time, histo, `1_1`, `2_1`, `3_1`, everything())
Cancer
cancerCountWide <- Cancer %>%
select(-risktime) %>%
pivot_wider(id_cols = time, names_from = c(histology, stage),
values_from=count) %>%
mutate(`histo` = " ") %>%
select(time, histo, `1_1`, `2_1`, `3_1`, everything())
cancerCountWide
table
)
my_header <- data.frame(
col_keys = c('X1', 'X2', 'X3', 'blank', 'X4', 'X5', 'blank', 'X6', 'X7', 'blank', 'X8', 'X9', 'blank', 'X10', 'X11'),
line2 = c(" ", "delta-Ct", "", "BestKeeper", "", "Normfinder", "", "geNorm", "", "Comprehensive Rank"),
line3 = c("Target",  "Avg. STDEV.", "Rank", "MAD", "Rank", "Stability", "Rank", "Avg.M", "Rank", "Geom. mean value", "Rank" )
)
my_header <- data.frame(
col_keys = c('X1', 'X2', 'X3', 'blank', 'X4', 'X5', 'blank', 'X6', 'X7', 'blank', 'X8', 'X9', 'blank', 'X10', 'X11'),
line2 = c(" ", "delta-Ct", "delta-Ct", "", "BestKeeper","BestKeeper", "", "Normfinder", "Normfinder", "", "geNorm", "geNorm", "", "Comprehensive Rank", "Comprehensive Rank"),
line3 = c("Target",  "Avg. STDEV.", "Rank", "", "MAD", "Rank", "", "Stability", "Rank", "", "Avg.M", "Rank", "", "Geom. mean value", "Rank" )
)
my_header
ft <- flextable(table, col_keys = my_header$col_keys)
my_header <- data.frame(
col_keys = c('X1', 'X2', 'X3', 'blank1', 'X4', 'X5', 'blank2', 'X6', 'X7', 'blank', 'X8', 'X9', 'blank3', 'X10', 'X11'),
line2 = c(" ", "delta-Ct", "delta-Ct", "", "BestKeeper","BestKeeper", "", "Normfinder", "Normfinder", "", "geNorm", "geNorm", "", "Comprehensive Rank", "Comprehensive Rank"),
line3 = c("Target",  "Avg. STDEV.", "Rank", "", "MAD", "Rank", "", "Stability", "Rank", "", "Avg.M", "Rank", "", "Geom. mean value", "Rank" )
)
ft <- flextable(table, col_keys = my_header$col_keys)
ft
ft <- set_header_df(ft, mapping = my_header, key = "col_keys")
ft
ft <- theme_booktabs(ft)
ft
ft <- merge_v(part = "header")
ft <- merge_h(part = "header")
ft <- merge_v(ft, part = "header")
ft <- merge_h(ft, part = "header")
ft
ft <- flextable(table, col_keys = my_header$col_keys)
ft <- set_header_df(ft, mapping = my_header, key = "col_keys")
ft <- theme_booktabs(ft)
ft <- merge_v(ft, part = "header")
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "all")
ft <- autofit(ft)
ft <-  empty_blanks(ft)
ft <- fix_border_issues(ft)
ft
ft <- flextable(table, col_keys = my_header$col_keys)
ft <- set_header_df(ft, mapping = my_header, key = "col_keys")
ft <- theme_booktabs(ft)
ft <- merge_v(ft, part = "header")
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "all")
ft <- autofit(ft)
ft <-  empty_blanks(ft)
ft
ft <- flextable(table, col_keys = my_header$col_keys)
ft <- set_header_df(ft, mapping = my_header, key = "col_keys")
ft <- theme_booktabs(ft)
ft <- merge_v(ft, part = "header")
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "all")
ft <- autofit(ft)
ft
ft <-  empty_blanks(ft, part = "body")
ft
ft <- flextable(table, col_keys = my_header$col_keys)
ft <- set_header_df(ft, mapping = my_header, key = "col_keys")
ft <- theme_booktabs(ft)
ft <- merge_v(ft, part = "header")
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "all")
ft <- autofit(ft)
ft <-  empty_blanks(ft, part = "header")
ft
ft <- fix_border_issues(ft)
ft
ft <- hline_top(ft)
ft
ft <- hline_top(ft, part = "header")
ft
ft <- flextable(table, col_keys = my_header$col_keys)
ft <- set_header_df(ft, mapping = my_header, key = "col_keys")
ft <- theme_booktabs(ft)
ft <- merge_v(ft, part = "header")
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "all")
ft <- autofit(ft)
ft <-  empty_blanks(ft, part = "header")
ft <- fix_border_issues(ft)
ft <- hline_top(ft, part = "header")
ft
ft <- flextable(table, col_keys = my_header$col_keys)
ft <- set_header_df(ft, mapping = my_header, key = "col_keys")
ft <- theme_booktabs(ft)
ft <- merge_v(ft, part = "header")
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "all")
ft <- autofit(ft)
ft
ft <-  empty_blanks(ft, part = "header")
ft
library(officer)
ft <- hline_top(ft, border = fp_border(width = 3), part = "header")
ft
ft <- hline_top(ft, border = fp_border(width = 2), part = "header")
ft
ft <- hline_bottom(ft, border = fp_border(width = 2), part = "header")
ft
ft <-  empty_blanks(ft, part = "header")
ft
ft <- hline_top(ft, border = fp_border(width = 2), part = "header")
ft
ft <- hline_bottom(ft, border = fp_border(width = 2), part = "header")
ft
ft <- flextable(table, col_keys = my_header$col_keys)
ft <- set_header_df(ft, mapping = my_header, key = "col_keys")
ft <- theme_booktabs(ft)
ft <- merge_v(ft, part = "header")
ft <- merge_h(ft, part = "header")
ft <- align(ft, align = "center", part = "all")
ft <- autofit(ft)
ft <- hline_bottom(ft, border = fp_border(width = 2), part = "header")
ft <-  empty_blanks(ft, part = "header")
ft <- fix_border_issues(ft)
ft <- hline_top(ft, border = fp_border(width = 2), part = "header")
ft
doc_1 <- read_docx()
print(doc_1, target = "C:/Users/PPET0123/Desktop/refseektest/flextab.png")
print(doc_1, target = "C:/Users/PPET0123/Desktop/refseektest/flextab.docx")
doc_1
file1 <- print(doc_1, target = "C:/Users/PPET0123/Desktop/refseektest/flextab.docx")
file1
doc_1
doc_1 <- body_add_par(doc_1, "This is a table", style = "heading 2", pos = "after")
file1 <- print(doc_1, target = "C:/Users/PPET0123/Desktop/refseektest/flextab.docx")
file1
print(doc_1, target = "C:/Users/PPET0123/Desktop/refseektest/flextab.docx")
doc_1 <- body_add_flextable(doc_1, ft)
print(doc_1, target = "C:/Users/PPET0123/Desktop/refseektest/flextab.docx")
save_as_docx(ft, pr_section = sect_properties,  "C:/Users/PPET0123/Desktop/refseektest/flextab.docx")
sect_properties <- prop_section(
page_size = page_size(orient = "landscape"),
type = "continuous",
page_margins = page_mar())
save_as_docx(ft, pr_section = sect_properties,  "C:/Users/PPET0123/Desktop/refseektest/flextab.docx")
save_as_docx(ft, pr_section = sect_properties,  path = "C:/Users/PPET0123/Desktop/refseektest/flextab.docx")
ft <- flextable(table, col_keys = my_header$col_keys) %>%
set_header_df(ft, mapping = my_header, key = "col_keys")
ft <- flextable(table, col_keys = my_header$col_keys) %>%
set_header_df(mapping = my_header, key = "col_keys")
ft
ft <- flextable(table, col_keys = my_header$col_keys) %>%
set_header_df(mapping = my_header, key = "col_keys") %>%
theme_booktabs() %>%
merge_v(part = "header") %>%
merge_h(part = "header") %>%
align(align = "center", part = "all") %>%
autofit(ft) %>%
hline_bottom(ft, border = fp_border(width = 2), part = "header") %>%
empty_blanks(ft, part = "header")  %>%
fix_border_issues(ft) %>%
hline_top(ft, border = fp_border(width = 2), part = "header")
ft <- flextable(table, col_keys = my_header$col_keys) %>%
set_header_df(mapping = my_header, key = "col_keys") %>%
theme_booktabs() %>%
merge_v(part = "header") %>%
merge_h(part = "header") %>%
align(align = "center", part = "all") %>%
autofit() %>%
hline_bottom(border = fp_border(width = 2), part = "header") %>%
empty_blanks(part = "header")  %>%
fix_border_issues() %>%
hline_top(border = fp_border(width = 2), part = "header")
ft
#'
#' @return the absolute path to a file
#'
#' @examples
#'
#' \dontrun{
#' absfilepath("../path/to/file")
#' }
#'
#'
absfilepath <- function(relativepath) {
path <- paste(
normalizePath(dirname(relativepath)),
basename(relativepath),
sep = "/"
)
return(path)
}
#' @export
#'
#'
#' @examples
#' \dontrun{
#'   rs_ktable2(results)
#' }
#'
#'
#'
rs_ktable2b <- function(refseekerlist){
library(flextable)
library(officer)
table <- data.frame( matrix(nrow = nrow(refseekerlist[[1]]), ncol = 11 ) )
table[1] <- refseekerlist[[1]][1]
for(i in 1:5){                    #       (ncol(results$Fresh_Frozen$stabilityTable))){
table[i*2] <- refseekerlist[[1]][i+1]
table[i*2+1] <- refseekerlist[[2]][i+1]
}
names(table) <- c("Target",  "Avg. STDEV.", "Rank", "MAD", "Rank", "Stability", "Rank", "Avg.M", "Rank", "Geom. mean value", "Rank" )
names(table) <- NULL
my_header <- data.frame(
col_keys = c('X1', 'X2', 'X3', 'blank1', 'X4', 'X5', 'blank2', 'X6', 'X7', 'blank', 'X8', 'X9', 'blank3', 'X10', 'X11'),
line2 = c(" ", "delta-Ct", "delta-Ct", "", "BestKeeper","BestKeeper", "", "Normfinder", "Normfinder", "", "geNorm", "geNorm", "", "Comprehensive Rank", "Comprehensive Rank"),
line3 = c("Target",  "Avg. STDEV.", "Rank", "", "MAD", "Rank", "", "Stability", "Rank", "", "Avg.M", "Rank", "", "Geom. mean value", "Rank" )
)
ft <- flextable(table, col_keys = my_header$col_keys) %>%
set_header_df(mapping = my_header, key = "col_keys") %>%
theme_booktabs() %>%
merge_v(part = "header") %>%
merge_h(part = "header") %>%
align(align = "center", part = "all") %>%
autofit() %>%
hline_bottom(border = fp_border(width = 2), part = "header") %>%
empty_blanks(part = "header")  %>%
fix_border_issues() %>%
hline_top(border = fp_border(width = 2), part = "header")
sect_properties <- prop_section(
page_size = page_size(orient = "landscape"),
type = "continuous",
page_margins = page_mar())
save_as_docx(ft, pr_section = sect_properties,  path = "C:/Users/PPET0123/Desktop/refseektest/flextab.docx")
return(ft)
}
answer <- rsdialog()
library(refSeeker)
answer <- rsdialog()
#'
#'
#' @import tcltk
#' @examples
#'
#'\dontrun{
#' dialog.answers <- rsdialog()
#'}
#'
#'
rsdialog <- function(){
outdir <- getwd()
inputfile <- c("No selection")
filename <- tclVar("type a prefix")
flnm <- ""
ok = FALSE
grph <- "multi"
graph <- tclVar("multi")
srt <- "Comprehensive Rank"
sort <- tclVar("Comprehensive Rank")
img <- "png"
image <- tclVar("png")
ori <- "horizontal"
orient <- tclVar("horizontal")
datout <- "xlsx"
dataout <- tclVar("xlsx")
slctinfile <- function(){
inputfile <<- rsselectfiles()
#inputfile <<- tk_choose.files()
tkconfigure(filelabel, text =  paste(basename(inputfile), sep = ", "))
}
slctfldr <- function(){
outdir <<- tk_choose.dir()
tkconfigure(outdirlabel, text = outdir)
}
radio1press <- function(){grph <<- "individual"}
radio2press <- function(){grph <<- "multi"}
# Sort radio functions
sortradio1press <- function(){srt <<- "Comprehensive Rank"}
sortradio2press <- function(){srt <<- "geNorm"}
sortradio3press <- function(){srt <<- "Normfinder"}
sortradio4press <- function(){srt <<- "BestKeeper"}
sortradio5press <- function(){srt <<- "delta-Ct"}
sortradio6press <- function(){srt <<- "Targets"}
# Image type radio functions
imgradio1press <- function(){img <<- "png"}
imgradio2press <- function(){img <<- "tiff"}
imgradio3press <- function(){img <<- "jpeg"}
imgradio4press <- function(){img <<- "svg"}
imgradio5press <- function(){img <<- "none"}
# Orientation type radio functions
imgradio1press <- function(){ori <<- "horizontal"}
imgradio2press <- function(){ori <<- "vertical"}
quit <- function(){
tkdestroy(tt)
ok <<- FALSE
}
okfunc <- function(){
tkdestroy(tt)
ok <<- TRUE
flnm <<- tclvalue( filename)
}
tt <- tktoplevel()
tkwm.title(tt,"RefSeeker dialog")
spacerlabel <- tklabel(tt, text = "")
filelabel <- tklabel(tt, text = inputfile)
outdirlabel <- tklabel(tt, text = outdir)
fileslct.but <- tkbutton(tt, text="Select input file(s)", command=slctinfile)
fldrslct.but <- tkbutton(tt, text="Change output folder", command=slctfldr)
filename.field <- tkentry(tt, textvariable = filename)
# Graph type radio
graphradio1 <- tkradiobutton(tt, text = "Individual", variable = graph, value = "individual", command = radio1press)
graphradio2 <- tkradiobutton(tt, text = "Multi", variable = graph, value = "multi", command = radio2press)
#Graph sorting radio
sortradio1 <- tkradiobutton(tt, text = "Comprehensive Rank", variable = sort, value = "Comprehensive Rank", command = radio1press)
sortradio2 <- tkradiobutton(tt, text = "geNorm", variable = sort, value = "geNorm", command = radio2press)
sortradio3 <- tkradiobutton(tt, text = "Normfinder", variable = sort, value = "Normfinder", command = radio1press)
sortradio4 <- tkradiobutton(tt, text = "BestKeeper", variable = sort, value = "BestKeeper", command = radio2press)
sortradio5 <- tkradiobutton(tt, text = "delta-Ct", variable = sort, value = "delta-Ct", command = radio1press)
sortradio6 <- tkradiobutton(tt, text = "Targets", variable = sort, value = "Targets", command = radio2press)
# Image type radio
imgradio1 <- tkradiobutton(tt, text = "PNG", variable = image, value = "png", command = imgradio1press)
imgradio2 <- tkradiobutton(tt, text = "TIFF", variable = image, value = "tiff", command = imgradio2press)
imgradio3 <- tkradiobutton(tt, text = "JPEG", variable = image, value = "jpeg", command = imgradio3press)
imgradio4 <- tkradiobutton(tt, text = "SVG", variable = image, value = "svg", command = imgradio4press)#, state = "disable")
imgradio5 <- tkradiobutton(tt, text = "None", variable = image, value = "none", command = imgradio5press)
# Graph orientation
orientradio1 <- tkradiobutton(tt, text = "Horizontal", variable = orient, value = "horizontal", command = imgradio1press)
orientradio2 <- tkradiobutton(tt, text = "Vertical", variable = orient, value = "vertical", command = imgradio2press)
# table type radio functions
tabradio1press <- function(){datout <<- "xlsx"}
tabradio2press <- function(){datout <<- "ods"}
tabradio3press <- function(){datout <<- "csv"}
tabradio4press <- function(){datout <<- "tsv"}
tabradio5press <- function(){datout <<- "txt"}
tabradio6press <- function(){datout <<- "doc-s"}
tabradio7press <- function(){datout <<- "doc-r"}
tabradio8press <- function(){datout <<- "doc-c"}
# Data output radio
tabradio1 <- tkradiobutton(tt, text = "XLSX", variable = dataout, value = "xlsx", command = tabradio1press)
tabradio2 <- tkradiobutton(tt, text = "ODS", variable = dataout, value = "ods", command = tabradio2press)#, state = "disable")
tabradio3 <- tkradiobutton(tt, text = "CSV", variable = dataout, value = "csv", command = tabradio3press)#, state = "disable")
tabradio4 <- tkradiobutton(tt, text = "TSV", variable = dataout, value = "tsv", command = tabradio4press)#, state = "disable")
tabradio5 <- tkradiobutton(tt, text = "TXT", variable = dataout, value = "txt", command = tabradio5press)#, state = "disable")
tabradio6 <- tkradiobutton(tt, text = "DOCX-Stability", variable = dataout, value = "doc-s", command = tabradio6press)#, state = "disable")
tabradio7 <- tkradiobutton(tt, text = "DOCX-Rank", variable = dataout, value = "doc-r", command = tabradio7press)#, state = "disable")
tabradio8 <- tkradiobutton(tt, text = "DOCX-Combi", variable = dataout, value = "doc-c", command = tabradio8press)#, state = "disable")
q.but <- tkbutton(tt, text = "Quit", command = quit)
ok.but <- tkbutton(tt, text = "Ok", command = okfunc)
tkgrid(tklabel(tt, text = "Input file(s):"), filelabel, fileslct.but, columnspan = 7, rowspan = 2, pady = 10, padx = 10)
tkgrid(tklabel(tt, text = "Output directory:"), outdirlabel, fldrslct.but, columnspan = 7, pady = 10, padx = 10)
tkgrid(tklabel(tt, text = "File name prefix:"), filename.field, columnspan = 7, pady = 10, padx = 10)
tkgrid(tklabel(tt, text = "Select type of graph:"), graphradio1, graphradio2, columnspan = 7, pady = 10, padx = 10, sticky = "w")
tkgrid(tklabel(tt, text = "Select ordering of target-axis:"), sortradio1, sortradio2, sortradio3, sortradio4, sortradio5, sortradio6, columnspan = 7, pady = 10, padx = 10, sticky = "w")
tkgrid(tklabel(tt, text = "Select orientation of bars:"), orientradio1, orientradio2, columnspan = 7, pady = 10, padx = 10, sticky = "w")
tkgrid(tklabel(tt, text = "Select graph output file format:"), imgradio1, imgradio2, imgradio3, imgradio4, columnspan = 7, pady = 10, padx = 10, sticky = "w")
tkgrid(tklabel(tt, text = "Select data output format:"), tabradio1, tabradio2, tabradio3, tabradio4, tabradio5, tabradio6, tabradio7, tabradio8, columnspan = 7, pady = 10, padx = 10, sticky = "w")
#tkgrid(q.but, spacerlabel, ok.but, columnspan = 10, pady= 20, padx = 10)
tkgrid(q.but, columnspan = 1, pady= 20, padx = 10, row = 10, column = 7, sticky = "w")
tkgrid(ok.but, columnspan = 1, pady= 20, padx = 10, row = 10, column = 14, sticky = "e")
#tkgrid(ok.but, column = 3, columnspan = 1, pady= 10, padx= 10)
#tkgrid(q.but, pady = 10, padx = 10)
tkwait.window(tt)
return(c(ok, outdir, flnm, grph, srt, ori, img, datout, inputfile))
}
library(refSeeker)
answer <- rsdialog()
answer <- rsdialog()
library(refSeeker)
answer <- rsdialog()
library(refSeeker)
library(tcltk)
answer <- rsdialog()
answer
library(refSeeker)
rs_wizard()
answer <- rsdialog()
answer
library(refSeeker)
rs_wizard()
library(refSeeker)
rs_wizard()
library(refSeeker)
rs_loaddata(answer[2])
rs_loaddata()
rs_loaddata()
input <- rs_loaddata
input <- rs_loaddata()''
input <- rs_loaddata()
rs_normfinderFull(input)
rs_normfinderFull(input$FFPE)
rs_normfinderFull(input$FFPE, Groups = FALSE)
test <- input$FFPE
test$Groups <- c(rep(1, 10), rep(2,10))
test
rs_normfinderFull(input$FFPE, Groups = TRUE)
#' @param pStabLim Stability limit, report only stabilities above this value
#'
#' @return A list of lists of result tables depending on the Groups parameter
#' @export
#'
#'
#' @references Andersen C.L., Ledet-Jensen J., Ørntoft T.: Normalization of real-time quantitative RT-PCR data: a model based variance estimation approach to identify genes suited for normalization - applied to bladder- and colon-cancer data-sets.
#' Cancer Research. 2004 (64): 5245-5250
#'
# #' @examples
rs_normfinderFull2 <- function(expression, Groups=TRUE, ctVal=TRUE, pStabLim=0.25){
if(!file.exists(
paste0(dir(find.package("refSeeker", lib.loc=NULL, quiet = TRUE), pattern = "exdata", recursive = TRUE, full.names = TRUE, include.dirs = TRUE), "/r.NormOldStab5.txt")
)){
utils::download.file("https://moma.dk/files/r.NormOldStab5.txt",
paste0(dir(find.package("refSeeker", lib.loc=NULL, quiet = TRUE), pattern = "exdata", recursive = TRUE, full.names = TRUE, include.dirs = TRUE), "/r.NormOldStab5.txt"),
quiet = FALSE)
rsadjustnmfRounding(decimals = 3)
}
# source the r.NormOldStab5.txt
source(paste0(dir(find.package("refSeeker", lib.loc=NULL, quiet = TRUE), pattern = "exdata", recursive = TRUE, full.names = TRUE, include.dirs = TRUE), "/r.NormOldStab5.txt"))
###################################################################################################################
return(data.frame(t(expression)))
# write the temporary txt file table for the normfinderfuncton
utils::write.table(data.frame(t(expression)), "expression_temp.txt")
# Calculate the stabilities and save in Results
Results = Normfinder("expression_temp.txt", Groups = Groups, ctVal = ctVal, pStabLim = pStabLim)
# Remove the temporary txt file
unlink("expression_temp.txt")
return(Results)
}
rs_normfinderFull2(input$FFPE, Groups = TRUE)
rs_normfinderFull2(test, Groups = TRUE)
rs_normfinderFull(test, Groups = TRUE)
rs_bestkeeperFull(input$FFPE)
rs_reffinder(input$FFPE)
library(refSeeker)
rs_loaddata()
rs_loaddata()
input <- rs_loaddata()
res <- rs_reffinder(input)
tal = 3
tal
tal = c(3,5,7)
tal
res
rs_exporttable(res)
rs_exporttable(res, tabletype = docx-both)
rs_exporttable(res, tabletype = "docx-both")
rs_exporttable(res, "stab", tabletype = "docx-stability")
rs_exporttable
rs_wizard()
library(refSeeker)
rs_wizard()
rs_wizard()
rs_wizard()
library(refSeeker)
rs_wizard()
rs_wizard()
rs_wizard()
rs_wizard()
rs_wizard()
rs_loaddata()
input <- rs_loaddata()
res <- rs_reffinder()
res <- rs_reffinder(input)
rs_graph(res,)
rs_graph( res,
"C:\Users/PPET0123/Desktop/temp/ArtFig_graph",
filetype = "tiff",
height = 900
)
rs_graph(res,
"C:\Users/PPET0123/Desktop/temp/ArtFig_graph",
filetype = "tiff",
height = 900
)
rs_graph(res,
"C:/Users/PPET0123/Desktop/temp/ArtFig_graph",
filetype = "tiff",
height = 900
)
library(devtools)
usethis::use_gpl3_license()
usethis::use_gpl_license(2)
rs_graph(res)
input <- rs_loaddata()
input
res <- rs_reffinder(input)
rs_graph(res,
"C:/Users/PPET0123/Desktop/temp/ArtFig_graph",
filetype = "tiff",
height = 900
)
rs_graph(res,
"C:/Users/PPET0123/Desktop/temp/ArtFig_graph",
filetype = "tiff"
)
rs_exporttable(res,"C:/Users/PPET0123/Desktop/temp/ArtFig_table", tabletype = "xlsx")
