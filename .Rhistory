# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
})
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadtxtdata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
})
expect_equal(capture.output(as.data.frame(loadeddata)), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
as.data.frame(loadeddata)
loadeddata
writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/Reffinder_data_test.xlsx")) )
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
})
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
})
capture.output(loadeddata)
loadeddata
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadtxtdata.txt")) )
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
})
writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"), useBytes = TRUE)
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"), useBytes = TRUE)
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
})
as.data.frame( loadeddata[1] )
loadeddata[1] <- as.data.frame( loadeddata[1] )
loadeddata[1]
loadeddata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
loadeddata
loadeddata[[1]] <- as.data.frame( loadeddata[[1]] )
loadeddata
loadeddata[[1:3]] <- as.data.frame( loadeddata[[1:3]] )
loadeddata
as.data.frame( loadeddata[[1:3]] )
as.data.frame( loadeddata[1:3] )
loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
loadeddata[[1]] <- as.data.frame( loadeddata[[1]] )
loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
# Create refference file
# writeLines(capture.output(loadeddata), paste0(testrefpath(), "/testref/rs_loadexceldata.txt"))
expect_equal(capture.output(loadeddata), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata.txt")) )
})
loadeddata[[1]],3)
round(loadeddata[[1]],3)
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# loadeddata[[1]] <- as.data.frame( round(loadeddata[[1]][1:ncol],3) )
# loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
# loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
# Create refference file
writeLines(capture.output(loadeddata[[1]]), paste0(testrefpath(), "/testref/rs_loadexceldata1.txt"))
writeLines(capture.output(loadeddata[[2]]), paste0(testrefpath(), "/testref/rs_loadexceldata2.txt"))
expect_equal(capture.output(loadeddata[[1]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata1.txt")) )
expect_equal(capture.output(loadeddata[[2]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata2.txt")) )
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# loadeddata[[1]] <- as.data.frame( round(loadeddata[[1]][1:ncol],3) )
# loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
# loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
# Create refference file
writeLines(capture.output(loadeddata[[1]]), paste0(testrefpath(), "/testref/rs_loadexceldata1.txt"))
writeLines(capture.output(loadeddata[[2]]), paste0(testrefpath(), "/testref/rs_loadexceldata2.txt"))
expect_equal(capture.output(loadeddata[[1]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata1.txt")) )
expect_equal(capture.output(loadeddata[[2]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata2.txt")) )
})
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# loadeddata[[1]] <- as.data.frame( round(loadeddata[[1]][1:ncol],3) )
# loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
# loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
# Create refference file
writeLines(capture.output(loadeddata[[1]]), paste0(testrefpath(), "/testref/rs_loadexceldata1.txt"))
writeLines(capture.output(loadeddata[[2]]), paste0(testrefpath(), "/testref/rs_loadexceldata2.txt"))
writeLines(capture.output(loadeddata[[3]]), paste0(testrefpath(), "/testref/rs_loadexceldata3.txt"))
expect_equal(capture.output(loadeddata[[1]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata1.txt")) )
expect_equal(capture.output(loadeddata[[2]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata2.txt")) )
expect_equal(capture.output(loadeddata[[3]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata3.txt")) )
})
test_that("imports works for excel", {
## rs_loadtxtdata
loadeddata <- rs_loadexceldata ( paste0(testrefpath(), "/exceltest/Reffinder_data_test.xlsx") )
# loadeddata[[1]] <- as.data.frame( round(loadeddata[[1]][1:ncol],3) )
# loadeddata[[2]] <- as.data.frame( loadeddata[[2]] )
# loadeddata[[3]] <- as.data.frame( loadeddata[[3]] )
# Create refference file
# writeLines(capture.output(loadeddata[[1]]), paste0(testrefpath(), "/testref/rs_loadexceldata1.txt"))
# writeLines(capture.output(loadeddata[[2]]), paste0(testrefpath(), "/testref/rs_loadexceldata2.txt"))
# writeLines(capture.output(loadeddata[[3]]), paste0(testrefpath(), "/testref/rs_loadexceldata3.txt"))
expect_equal(capture.output(loadeddata[[1]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata1.txt")) )
expect_equal(capture.output(loadeddata[[2]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata2.txt")) )
expect_equal(capture.output(loadeddata[[3]]), readLines(paste0(testrefpath(), "/testref/rs_loadexceldata3.txt")) )
})
usethis::use_test("algorithms")
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
View(ct_vals)
library(testthat)
library(refSeeker)
# Setting HTTPUserAgent to prevent 406 unacceptable error when downloading Normfinder during tests
options("HTTPUserAgent" = "RStudio Desktop (2022.7.1.554)")
res <- rs_bestKeeper(ct_vals)
res
getwd()
testrefpath()
#' find the path to the testref folder containing reffences for checking results during testing
#'
#' @return A path to testref folder
#'
#'
#'
#'
testrefpath <- function(){
if(grepl("testthat", getwd(), fixed = TRUE)){
searchdir = "../.."
} else { searchdir = "."}
path <- dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
#path <- paste0(path,"/testref")
#write(path[1], "~/R/testlog.txt", append = TRUE)
return(path[1])
}
testrefpath()
write.csv(res, paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv")))
test_that("bestkeeper on matrix", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_bestKeeper(ct_vals)
getwd()
write.csv(res, paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv")))
})
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
test_that("bestkeeper on matrix", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_bestKeeper(ct_vals)
getwd()
write.csv(res, paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
})
test_that("bestkeeper on data.frame", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_bestKeeper(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
})
set.seed(100)
ct_vals <- as_tibble(data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)))
ct_vals <- tibble::as_tibble(data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- tibble::as_tibble(ct_vals)
res <- rs_bestKeeper(ct_vals)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
res
read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE)
ct_vals
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals
ct_vals <- tibble::as_tibble(ct_vals)
ct_vals
ct_vals
res <- rs_bestKeeper(ct_vals)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
test_that("bestkeeper on tibble", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- tibble::as_tibble(ct_vals)
res <- rs_bestKeeper(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
})
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_genorm(ct_vals)
res
ct_vals
write.csv(res, paste0(testrefpath(), "/testref/rs_genorm.csv"), row.names = FALSE)
test_that("genorm on data.frame", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_genorm(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_genorm.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_genorm.csv"), check.names = FALSE))
})
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- tibble::as_tibble(ct_vals)
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_bestKeeper(ct_vals)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
test_that("bestkeeper on matrix", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_bestKeeper(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
})
res <- rs_genorm(ct_vals)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_genorm.csv"), check.names = FALSE))
test_that("bestkeeper on matrix", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_genorm(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_genorm.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_genorm.csv"), check.names = FALSE))
})
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- tibble::as_tibble(ct_vals)
test_that("GeNorm on tibble", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- tibble::as_tibble(ct_vals)
res <- rs_genorm(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_genorm.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_genorm.csv"), check.names = FALSE))
})
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
rs_deltaCt(ct_vals)
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_bestKeeper(ct_vals)
res
usethis::use_test("export")
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
res
rs_exceltable(res, "excelexoirttest", addDate = FALSE)
detach(pste0(testrefpath(), "/excelexoirttest.xlsx"))
detach("excelexoirttest.xlsx")
detach("excelexoirttest")
unlink("excelexoirttest.xlsx")
testrefpath()
paste0(testrefpath(), "/excelexoirttest"     )
rs_exceltable(res, paste0(testrefpath(), "/testref/excelexoirttest"), addDate = FALSE)
read_excel(paste0(testrefpath(), "/testref/excelexporttest.xlsx"))
readxl::read_excel(paste0(testrefpath(), "/testref/excelexporttest.xlsx"))
rs_exceltable(res, paste0(testrefpath(), "/testref/excelexporttest"), addDate = FALSE)
readxl::read_excel(paste0(testrefpath(), "/testref/excelexporttest.xlsx"))
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexoirttest.xlsx"     ), 1),        readxl::read_excel(paste0(testrefpath(), "/testref/excelexporttest.xlsx"),1)   )
rs_exceltable(res, paste0(testrefpath(), "/testref/rs_exceltable"), addDate = FALSE)
test_that("multiplication works", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
# rs_exceltable(res, paste0(testrefpath(), "/testref/rs_exceltable"), addDate = FALSE)
rs_exceltable(res, "excelexporttest", addDate = FALSE)
expect_equal( readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"     ), 1),        readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"),1)   )
unlink(paste0(testrefpath(), "/excelexporttest.xlsx"     ) )
})
readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"     ), 1)
rs_exceltable(res, paste0(testrefpath(), "excelexporttest"), addDate = FALSE)
expect_equal( readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"     ), 1),        readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"),1)   )
testrefpath()
rs_exceltable(res, paste0(testrefpath(), "/excelexporttest"), addDate = FALSE)
expect_equal( readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"     ), 1),        readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"),1)   )
unlink(paste0(testrefpath(), "/excelexporttest.xlsx"     ) )
test_that("multiplication works", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
# rs_exceltable(res, paste0(testrefpath(), "/testref/rs_exceltable"), addDate = FALSE)
rs_exceltable(res, paste0(testrefpath(), "/excelexporttest"), addDate = FALSE)
expect_equal( readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"     ), 1),        readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"),1)   )
unlink(paste0(testrefpath(), "/excelexporttest.xlsx"     ) )
})
test_that("export as excel file", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
# rs_exceltable(res, paste0(testrefpath(), "/testref/rs_exceltable"), addDate = FALSE)
rs_exceltable(res, paste0(testrefpath(), "/excelexporttest"), addDate = FALSE)
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 1),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 1)
)
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 2),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 2)
)
unlink(paste0(testrefpath(), "/excelexporttest.xlsx"     ) )
})
test_that("export as excel file", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
# rs_exceltable(res, paste0(testrefpath(), "/testref/rs_exceltable"), addDate = FALSE)
invisible(rs_exceltable(res, paste0(testrefpath(), "/excelexporttest"), addDate = FALSE))
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 1),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 1)
)
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 2),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 2)
)
unlink(paste0(testrefpath(), "/excelexporttest.xlsx"     ) )
})
test_that("export as excel file", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
# rs_exceltable(res, paste0(testrefpath(), "/testref/rs_exceltable"), addDate = FALSE)
capture.output(rs_exceltable(res, paste0(testrefpath(), "/excelexporttest"), addDate = FALSE))
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 1),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 1)
)
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 2),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 2)
)
unlink(paste0(testrefpath(), "/excelexporttest.xlsx"     ) )
})
test_that("Normfinder online script can be loaded and works with data.frame", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
#options("HTTPUserAgent" = "RStudio Desktop (2022.7.1.554)")
# Testing purpose
## During test and check the user agent is changed to cause a server "406 not acceptable" error
#write(options("HTTPUserAgent")[[1]], "~/R/testlog.txt", append = TRUE)
#write(find.package("refSeeker", lib.loc=NULL, quiet = TRUE), "~/R/testlog.txt", append = TRUE)
res <- rs_normfinder(ct_vals)
#expect_equal (res, read.csv("../../refSeeker/exdata/testref/rs_normfindertest1.csv", check.names=FALSE))
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_normfindertest1.csv"), check.names = FALSE))
})
ct_vals <- tibble::as_tibble(ct_vals)
res <- rs_normfinder(ct_vals)
test_that("Normfinder online script can be loaded and works with tibble", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- tibble::as_tibble(ct_vals)
#options("HTTPUserAgent" = "RStudio Desktop (2022.7.1.554)")
# Testing purpose
## During test and check the user agent is changed to cause a server "406 not acceptable" error
#write(options("HTTPUserAgent")[[1]], "~/R/testlog.txt", append = TRUE)
#write(find.package("refSeeker", lib.loc=NULL, quiet = TRUE), "~/R/testlog.txt", append = TRUE)
res <- rs_normfinder(ct_vals)
#expect_equal (res, read.csv("../../refSeeker/exdata/testref/rs_normfindertest1.csv", check.names=FALSE))
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_normfindertest1.csv"), check.names = FALSE))
})
test_that("deltaCt on tibble", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- tibble::as_tibble(ct_vals)
Target <- c("gene2", "gene1", "gene4", "gene3", "gene5")
"Average of STDEV" <- c(1.292, 1.295, 1.402, 1.453, 1.614)
"Stability Rank" <- c(1,2,3,4,5)
results <- data.frame(Target, `Average of STDEV`, `Stability Rank`, check.names = F)
expect_equal(rs_deltaCt(ct_vals), results)
})
detach("package:refSeeker", unload = TRUE)
library(refSeeker)
usethis::use_vignette("Package description")
usethis::use_vignette("Package_description")
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals
rs_reffinder(ct_vals)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(refSeeker)
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals
library(refSeeker)
devtools::build_vignettes()
library(refSeeker)
library(refSeeker)
remove.packages("refSeeker", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
install.packages("~/Documents/R/refSeeker_0.9.4.tar.gz", repos = NULL, type = "source")
getwd()
devtools::build_vignettes()
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::build()
detach("package:reffindeR", unload = TRUE)
detach("package:refSeeker", unload = TRUE)
install.packages("../reffindeR_0.9.4.tar.gz", repos = NULL, type = "source")
install.packages("../refSeeker_0.9.4.tar.gz", repos = NULL, type = "source")
library(refSeeker)
exceldata <- rs_loadexceldata("../inst/exdata/vignettesInputs/Reffinder_data_test.xlsx")
exceldata <- rs_loadexceldata("../inst/exdata/vignetteInputs/Reffinder_data_test.xlsx")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(refSeeker)
exceldata <- rs_loadexceldata("../inst/exdata/vignetteInputs/Reffinder_data_test.xlsx")
exceldata
exceldata[[1]]
rs_normfinder(exceldata$Fresh_Frozen)
rs_genorm(exceldata$Fresh_Frozen)
rs_bestKeeper(exceldata$Fresh_Frozen)
rs_deltaCt(exceldata$Fresh_Frozen)
rsresults <- rs_reffinder(exceldata)
rsresults
rs_exceltable(rsresults$Fresh_Frozen, "../inst/exdata/VignettesOutputs/excel_results", addDate = TRUE)
rs_graph(rsresults)
rs_graph(rsresults, "../inst/exdata/VignettesOutputs/FFPE_excel_results", outputPng = TRUE, forceSingle = TRUE)
rs_graph(rsresults, "../inst/exdata/VignettesOutputs/FFPE_excel_results", outputPng = TRUE, forceSingle = TRUE, width = 1024)
getwd()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(refSeeker)
exceldata <- rs_loadexceldata("../inst/exdata/vignetteInputs/Reffinder_data_test.xlsx")
exceldata
exceldata[[1]]
rs_normfinder(exceldata$Fresh_Frozen)
rs_genorm(exceldata$Fresh_Frozen)
rs_bestKeeper(exceldata$Fresh_Frozen)
rs_deltaCt(exceldata$Fresh_Frozen)
rsresults <- rs_reffinder(exceldata)
rsresults
rs_exceltable(rsresults$Fresh_Frozen, "../inst/exdata/VignettesOutputs/excel_results", addDate = TRUE)
rs_graph(rsresults)
rs_graph(rsresults, "../inst/exdata/VignettesOutputs/refSeeker_excel_results", outputPng = TRUE, forceSingle = TRUE, width = 1024)
devtools::build_vignettes()
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::build()
detach("package:refSeeker", unload = TRUE)
install.packages("../refSeeker_0.9.4.tar.gz", repos = NULL, type = "source")
