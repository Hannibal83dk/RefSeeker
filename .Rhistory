"Average of STDEV" <- c(1.292, 1.295, 1.402, 1.453, 1.614)
"Stability Rank" <- c(1,2,3,4,5)
results <- data.frame(Target, `Average of STDEV`, `Stability Rank`, check.names = F)
expect_equal(rs_deltact(ct_vals), results)
})
test_that("bestkeeper on matrix", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_bestKeeper(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
})
test_that("bestkeeper on data.frame", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_bestkeeper(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
})
#' find the path to the testref folder containing reffences for checking results during testing
#'
#' @return A path to testref folder
#'
#'
#'
#'
testrefpath <- function(){
if(grepl("testthat", getwd(), fixed = TRUE)){
searchdir = "../.."
} else { searchdir = "."}
path <- dir(searchdir, pattern = "exdata", recursive = TRUE, include.dirs = TRUE, full.names = TRUE)
#path <- paste0(path,"/testref")
#write(path[1], "~/R/testlog.txt", append = TRUE)
return(path[1])
}
test_that("bestkeeper on data.frame", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_bestkeeper(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
})
test_that("bestkeeper on tibble", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- tibble::as_tibble(ct_vals)
res <- rs_bestKeeper(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
})
test_that("bestkeeper on tibble", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- tibble::as_tibble(ct_vals)
res <- rs_bestkeeper(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_bestkeeper.csv"), check.names = FALSE))
})
test_that("genorm on data.frame", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_genorm(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_genorm.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_genorm.csv"), check.names = FALSE))
})
test_that("genorm on matrix", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_genorm(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_genorm.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_genorm.csv"), check.names = FALSE))
})
test_that("GeNorm on tibble", {
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
ct_vals <- tibble::as_tibble(ct_vals)
res <- rs_genorm(ct_vals)
## Creating reference file
# write.csv(res, paste0(testrefpath(), "/testref/rs_genorm.csv"), row.names = FALSE)
expect_equal(res, read.csv(paste0(testrefpath(), "/testref/rs_genorm.csv"), check.names = FALSE))
})
test_that("export as excel file", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
# rs_exceltable(res, paste0(testrefpath(), "/testref/rs_exceltable"), addDate = FALSE)
capture.output(rs_exceltable(res, paste0(testrefpath(), "/excelexporttest"), addDate = FALSE))
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 1),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 1)
)
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 2),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 2)
)
unlink(paste0(testrefpath(), "/excelexporttest.xlsx"     ) )
})
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
capture.output(rs_exceltable(res, paste0(testrefpath(), "/excelexporttest"), addDate = FALSE))
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 1),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 1)
)
readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 1)
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 1)
rs_exceltable(res, paste0(testrefpath(), "/testref/rs_exceltable"), addDate = FALSE)
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 1),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 1)
)
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 2),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 2)
)
unlink(paste0(testrefpath(), "/excelexporttest.xlsx"     ) )
test_that("export as excel file", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
# rs_exceltable(res, paste0(testrefpath(), "/testref/rs_exceltable"), addDate = FALSE)
capture.output(rs_exceltable(res, paste0(testrefpath(), "/excelexporttest"), addDate = FALSE))
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 1),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 1)
)
expect_equal(readxl::read_excel(paste0(testrefpath(), "/excelexporttest.xlsx"), 2),
readxl::read_excel(paste0(testrefpath(), "/testref/rs_exceltable.xlsx"), 2)
)
unlink(paste0(testrefpath(), "/excelexporttest.xlsx"     ) )
})
set.seed(100)
ct_vals <- data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20))
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
res[[1]]
read.csv(paste0(testrefpath(), "/testref/rs_reffinder_df1.csv"), check.names = FALSE)
testrefpath()
testrefpath()
write.csv(res[[1]], paste0(testrefpath(), "/testref/rs_reffinder_df1.csv"))
expect_equal(res[[1]], read.csv(paste0(testrefpath(), "/testref/rs_reffinder_df1.csv"), check.names = FALSE))
read.csv(paste0(testrefpath(), "/testref/rs_reffinder_df1.csv"), check.names = FALSE)
res[[1]]
write.csv(res[[1]], paste0(testrefpath(), "/testref/rs_reffinder_df1.csv"), row.names = FALSE)
expect_equal(res[[1]], read.csv(paste0(testrefpath(), "/testref/rs_reffinder_df1.csv"), check.names = FALSE))
write.csv(res[[2]], paste0(testrefpath(), "/testref/rs_reffinder_df2.csv"), row.names = FALSE)
test_that("reffinder works with matrices", {
set.seed(100)
ct_vals <- matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)
dimnames(ct_vals)[[2]] <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
res <- rs_reffinder(ct_vals)
write(getwd(), "~/R/testlog.txt", append = TRUE)
expect_equal(res[[1]], read.csv(paste0(testrefpath(), "/testref/rs_reffinder_df1.csv"), check.names = FALSE))
expect_equal(res[[2]], read.csv(paste0(testrefpath(), "/testref/rs_reffinder_df2.csv"), check.names = FALSE))
})
test_that("reffinder works with tibble", {
set.seed(100)
tb_vals <- tibble::as_tibble(as.data.frame(matrix(rnorm(5*20, mean = 25), ncol = 5, nrow = 20)))
names(tb_vals) <-  c("gene1", "gene2", "gene3", "gene4", "gene5")
tb_res <- rs_reffinder(tb_vals)
expect_equal(tb_res[[1]], read.csv(paste0(testrefpath(), "/testref/rs_reffinder_df1.csv"), check.names = FALSE))
expect_equal(tb_res[[2]], read.csv(paste0(testrefpath(), "/testref/rs_reffinder_df2.csv"), check.names = FALSE))
})
rm(rs_wizzard)
rs_wizzard()
rs_batchExcel3()
rs_batchExcel3()
rs_batchExcel2()
library(refSeeker)
rs_batchExcel3()
rs_batchExcel3
rsgraphtypeselect()
rsgraphtypeselect()
rsgraphtypeselect()
rsgraphtypeselect()
#'
#'
#' @import tcltk
#' @examples
#'
#'\dontrun{
#' path <- rsoutdirselect()
#'}
#'
#'
rsgraphtypeselect <- function(){
selection <- ""
#dir <- tclVar("")
tt <- tktoplevel()
tkwm.title(tt,"Select graph type")
slctsnge <- function() {
selection <<- "single"
tkdestroy(tt)
}
slctmlt <- function(){
selection <<- "multi"
tkdestroy(tt)
}
choosewd.but <- tkbutton(tt, text="Single graphs", command=slctsnge)
fldrslct.but <- tkbutton(tt, text="A multigraph", command=slctmlt)
tkgrid(tklabel(tt,text=paste(" Please select the graph type.\n\n A single graph for each dataset or \n a faceted graph compairing all datasets \n")), columnspan = 2, pady = 15)
tkgrid(choosewd.but, fldrslct.but, pady= 10, padx= 10)
return(selection)
}
rsgraphtypeselect()
library(tcltk)
rsgraphtypeselect()
rsgraphtypeselect()
selection <- ""
selection <- ""
#dir <- tclVar("")
tt <- tktoplevel()
tkwm.title(tt,"Select graph type")
slctsnge <- function() {
selection <<- "single"
tkdestroy(tt)
}
slctmlt <- function(){
selection <<- "multi"
tkdestroy(tt)
}
choosewd.but <- tkbutton(tt, text="Single graphs", command=slctsnge)
fldrslct.but <- tkbutton(tt, text="A multigraph", command=slctmlt)
tkgrid(tklabel(tt,text=paste(" Please select the graph type.\n\n A single graph for each dataset or \n a faceted graph compairing all datasets \n")), columnspan = 2, pady = 15)
tkgrid(choosewd.but, fldrslct.but, pady= 10, padx= 10)
#'
#'
#' @import tcltk
#' @examples
#'
#'\dontrun{
#' path <- rsoutdirselect()
#'}
#'
#'
rsgraphtypeselect <- function(){
selection <- ""
#dir <- tclVar("")
tt <- tktoplevel()
tkwm.title(tt,"Select graph type")
slctsnge <- function() {
selection <<- "single"
tkdestroy(tt)
}
slctmlt <- function(){
selection <<- "multi"
tkdestroy(tt)
}
choosewd.but <- tkbutton(tt, text="Single graphs", command=slctsnge)
fldrslct.but <- tkbutton(tt, text="A multigraph", command=slctmlt)
tkgrid(tklabel(tt,text=paste(" Please select the graph type.\n\n A single graph for each dataset or \n a faceted graph compairing all datasets \n")), columnspan = 2, pady = 15)
tkgrid(choosewd.but, fldrslct.but, pady= 10, padx= 10)
return(selection)
}
rsgraphtypeselect()
#'
#'
#' @import tcltk
#' @examples
#'
#'\dontrun{
#' path <- rsoutdirselect()
#'}
#'
#'
rsexltypeselect <- function(){
selection <- ""
dir <- tclVar("")
tt <- tktoplevel()
tkwm.title(tt,"Select excel file type")
slctmlt <- function() {
selection <<- "multi"
tkdestroy(tt)
}
slctsnge <- function(){
selection <<- "single"
tkdestroy(tt)
}
mltslct.but <- tkbutton(tt, text="Multiple excel files", command=slctmlt)
sngslct.but <- tkbutton(tt, text="Single excel file", command=slctsnge)
tkgrid(tklabel(tt,text=paste(" Please select the excel file type type.\n\n Multiple excelfiles each containing results from a single dataset or \na single excel file containg results from all datasets \n")), columnspan = 2, pady = 15)
tkgrid(mltslct.but, sngslct.but, pady= 10, padx= 10)
tkwait.window(tt)
return(selection)
}
rsgraphtypeselect()
#'
#'
#' @import tcltk
#' @examples
#'
#'\dontrun{
#' path <- rsoutdirselect()
#'}
#'
#'
rsgraphtypeselect <- function(){
selection <- ""
#dir <- tclVar("")
tt <- tktoplevel()
tkwm.title(tt,"Select graph type")
slctsnge <- function() {
selection <<- "single"
tkdestroy(tt)
}
slctmlt <- function(){
selection <<- "multi"
tkdestroy(tt)
}
choosewd.but <- tkbutton(tt, text="Single graphs", command=slctsnge)
fldrslct.but <- tkbutton(tt, text="A multigraph", command=slctmlt)
tkgrid(tklabel(tt,text=paste(" Please select the graph type.\n\n A single graph for each dataset or \n a faceted graph compairing all datasets \n")), columnspan = 2, pady = 15)
tkgrid(choosewd.but, fldrslct.but, pady= 10, padx= 10)
tkwait.window(tt)
return(selection)
}
rsgraphtypeselect()
rsgraphtypeselect()
#'
#'
#' @import tcltk
#' @examples
#'
#'\dontrun{
#' path <- rsoutdirselect()
#'}
#'
#'
rsgraphtypeselect <- function(){
selection <- ""
#dir <- tclVar("")
tt <- tktoplevel()
tkwm.title(tt,"Select graph type")
slctsnge <- function() {
selection <<- "single"
tkdestroy(tt)
}
slctmlt <- function(){
selection <<- "multi"
tkdestroy(tt)
}
selsingle.but <- tkbutton(tt, text="Single graphs", command=slctsnge)
selmulti.but <- tkbutton(tt, text="A multigraph", command=slctmlt)
tkgrid(tklabel(tt,text=paste(" Please select the graph type.\n\n A single graph for each dataset or \n a faceted graph compairing all datasets \n")), columnspan = 2, pady = 15)
tkgrid(selsingle.but, selmulti.but, pady= 10, padx= 10)
tkwait.window(tt)
return(selection)
}
rsgraphtypeselect()
rsgraphtypeselect()
rs_batchExcel3(
)
library(refSeeker)
rs_batchExcel3()
library(refSeeker)
rs_wizzard()
library(refSeeker)
rs_wizzard()
library(refSeeker)
rsdialog()
library(refSeeker)
rsdialog()
library(refSeeker)
rsdialog()
library(refSeeker)
rsdialog()
#'
#'
#' @examples
#' \dontrun{
#' rs_batchExcel()
#' }
#'
#'
#'
#'
rs_batchExcel <- function(filepath = "", outdir = "", graphtype = c("FALSE", "multi", "single")){
cat(graphtype)
if(filepath == "") filepath <- file.choose()
rfres <- rs_reffinder(rs_loadexceldata(filepath))
if(outdir == "") outdir <- rsoutdirselect()
if(is.na(outdir)){outdir <- getwd()}
graphtype <- rsgraphtypeselect()
cat(graphtype)
nms <- names(rfres)
#exltype <- rsexltypeselect()
if(graphtype == "single"){
rs_graph(rfres, paste0(outdir,"/"), forceSingle = TRUE)
} else if(graphtype == "multi"){
rs_graph(rfres, paste0(outdir, "/", tools::file_path_sans_ext(basename(filepath))))
}
for (i in 1: length(nms)) {
rs_exceltable(rfres[[i]], paste(outdir, "/", nms[i], sep = ""))
}
}
rs_batchExcel()
#'
#'
#' @examples
#' \dontrun{
#' rs_batchExcel()
#' }
#'
#'
#'
#'
rs_batchExcel <- function(filepath = "", outdir = "", graphtype = c("FALSE", "multi", "single")){
if(graphtype == "") cat("graphtype empty\n")
if(graphtype == "multi") cat("graphtype multi\n")
if(graphtype == "single") cat("graphtype single\n")
if(filepath == "") filepath <- file.choose()
rfres <- rs_reffinder(rs_loadexceldata(filepath))
if(outdir == "") outdir <- rsoutdirselect()
if(is.na(outdir)){outdir <- getwd()}
graphtype <- rsgraphtypeselect()
cat(graphtype)
nms <- names(rfres)
#exltype <- rsexltypeselect()
if(graphtype == "single"){
rs_graph(rfres, paste0(outdir,"/"), forceSingle = TRUE)
} else if(graphtype == "multi"){
rs_graph(rfres, paste0(outdir, "/", tools::file_path_sans_ext(basename(filepath))))
}
for (i in 1: length(nms)) {
rs_exceltable(rfres[[i]], paste(outdir, "/", nms[i], sep = ""))
}
}
rs_batchExcel()
graphtype
#'
#'
#' @examples
#' \dontrun{
#' rs_batchExcel()
#' }
#'
#'
#'
# #'c("FALSE", "multi", "single")
rs_batchExcel <- function(filepath = "", outdir = "", graphtype = ""){
if(graphtype == "") cat("graphtype empty\n")
if(graphtype == "multi") cat("graphtype multi\n")
if(graphtype == "single") cat("graphtype single\n")
if(filepath == "") filepath <- file.choose()
rfres <- rs_reffinder(rs_loadexceldata(filepath))
if(outdir == "") outdir <- rsoutdirselect()
if(is.na(outdir)){outdir <- getwd()}
graphtype <- rsgraphtypeselect()
cat(graphtype)
nms <- names(rfres)
#exltype <- rsexltypeselect()
if(graphtype == "single"){
rs_graph(rfres, paste0(outdir,"/"), forceSingle = TRUE)
} else if(graphtype == "multi"){
rs_graph(rfres, paste0(outdir, "/", tools::file_path_sans_ext(basename(filepath))))
}
for (i in 1: length(nms)) {
rs_exceltable(rfres[[i]], paste(outdir, "/", nms[i], sep = ""))
}
}
rs_batchExcel()
#'
#'
#' @examples
#' \dontrun{
#' rs_batchExcel()
#' }
#'
#'
#'
# #'c("FALSE", "multi", "single")
rs_batchExcel <- function(filepath = "", outdir = "", graphtype = ""){
# Selection of input file if none given
if(filepath == "") filepath <- file.choose()
rfres <- rs_reffinder(rs_loadexceldata(filepath))
# Selection of output directory if none given
if(outdir == "") outdir <- rsoutdirselect()
if(is.na(outdir)){outdir <- getwd()}
# Selection of graph type if none given
if(graphtype == "") graphtype <- rsgraphtypeselect()
cat(graphtype)
nms <- names(rfres)
#exltype <- rsexltypeselect()
if(graphtype!="none"){ # If graph type is not "none" something should be printet
if(graphtype == "single"){
rs_graph(rfres, paste0(outdir,"/"), forceSingle = TRUE)
} else if(graphtype == "multi"){
rs_graph(rfres, paste0(outdir, "/", tools::file_path_sans_ext(basename(filepath))))
}
}
for (i in 1: length(nms)) {
rs_exceltable(rfres[[i]], paste(outdir, "/", nms[i], sep = ""))
}
}
rs_batchExcel()
rs_batchExcel(graphtype = "multi")
library(refSeeker)
rs_batchExcel(graphtype = "multi")
library(refSeeker)
