rlang::last_trace()
ggplot2::ggplot(rftable, ggplot2::aes_string('Target', 'Stability')) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('Target', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value")
rs_graph(results)
rftable
reffinderlist
filename
width
height
units
res
ordering
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop(
cat("function stopped due to ggplot2"),
"Package \"ggplot2\" must be installed to use this function.",
call. = FALSE
)
}
if(ordering[1] != "Targetorder"){
for (i in 1:length(reffinderlist)) {
algonames <- names(reffinderlist[[i]]$stabilityTable)
sortcol <- which(algonames == ordering[1])
reffinderlist[[i]]$stabilityTable <- reffinderlist[[i]]$stabilityTable[order(reffinderlist[[i]]$stabilityTable[,sortcol]),]
}
}
rftable <- data.frame()
## Adding specific identifiers for each stability value
if(is.null(names(reffinderlist))){ # Target names have not been provided
# Add identifier to tables and add them to the new rftable
## If dataset are not named, use ID numbers
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- paste0("ID_", i)
# Add the tables to the rftable
rftable <- rbind(rftable, reffinderlist[[i]]$stabilityTable)
}
} else{ # Target names have been provided
# Add identifier to tables and add them to the new rftable
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- names(reffinderlist)[i]
# Add the tables to the rftable
rftable <- rbind(rftable,reffinderlist[[i]]$stabilityTable)
}
}
View(rftable)
# Create a holder for the algorithms list
algorithmlist <- names(rftable[2:6])
# Rename targets in each table by adding identifier (normally tissue type)
## necessary for arranging the graphs x-axis individually
rftable$Target <- paste(rftable$Target, "__", rftable$dataID, sep = "")
# Factorize each target based on the unique identifier
rftable$Target <- factor(rftable$Target, levels = rftable$Target)
reffinderlist[[i]]$stabilityTable
library(ggplot2)
p <- ggplot2::ggplot(rftable, ggplot2::aes_string('Target', 'Stability')) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('Target', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value")
print( p )
ggplot2::ggplot(rftable, ggplot2::aes_string('Target', 'Stability')) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('Target', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value")
rftable
View(rftable)
# Melt the table
rftable <- reshape2::melt(rftable, c(names(rftable[1]), "dataID", "Target"),
measure.vars = algorithmlist,
variable.name = "algorithm",
value.name = "Stability"
)
# Factorize the algorithms for ordering in the graph
rftable$algorithm <- factor(rftable$algorithm, algorithmlist)
rftable$Stability <- as.numeric(rftable$Stability)
# Remove incomplete entries, should not be necessary
rftable <- rftable[stats::complete.cases(rftable),]
# Create ghost data frame to hold invisible values for setting the first 4 rows max value to the same value
ghostframe <- rftable
ghostframe$Stability <- 3
p <- ggplot2::ggplot(rftable, ggplot2::aes_string('Target', 'Stability')) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('Target', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value")
print( p )
ggplot2::ggplot(rftable, ggplot2::aes_string('Target', 'Stability')) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('Target', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
#ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value")
rlang::last_error()
rlang::last_trace()
ggplot2::ggplot(rftable, ggplot2::aes_string('Target', 'Stability'))
ggplot2::ggplot(rftable, ggplot2::aes_string('Target', 'Stability')) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
#ggplot2::geom_point(aes_string('Target', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value")
ggplot2::ggplot(rftable, ggplot2::aes_string('Target', 'Stability')) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
#ggplot2::geom_point(aes_string('Target', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0))
ggplot2::ggplot(rftable, ggplot2::aes_string('Target', 'Stability')) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
#ggplot2::geom_point(aes_string('Target', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free")
ggplot2::ggplot(rftable, ggplot2::aes_string('Target', 'Stability')) +
ggplot2::geom_bar(stat = "identity")
ggplot(rftable, aes(Target, Stabilty))
rftable <- data.frame()
## Adding specific identifiers for each stability value
if(is.null(names(reffinderlist))){ # Target names have not been provided
# Add identifier to tables and add them to the new rftable
## If dataset are not named, use ID numbers
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- paste0("ID_", i)
# Add the tables to the rftable
rftable <- rbind(rftable, reffinderlist[[i]]$stabilityTable)
}
} else{ # Target names have been provided
# Add identifier to tables and add them to the new rftable
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- names(reffinderlist)[i]
# Add the tables to the rftable
rftable <- rbind(rftable,reffinderlist[[i]]$stabilityTable)
}
}
# Add identifier to tables and add them to the new rftable
## If dataset are not named, use ID numbers
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- paste0("ID_", i)
# Add the tables to the rftable
rftable <- rbind(rftable, reffinderlist[[i]]$stabilityTable)
}
rftable <- data.frame()
reffinderlist
if(is.null(names(reffinderlist))){ # Target names have not been provided
# Add identifier to tables and add them to the new rftable
## If dataset are not named, use ID numbers
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- paste0("ID_", i)
# Add the tables to the rftable
rftable <- rbind(rftable, reffinderlist[[i]]$stabilityTable)
}
} else{ # Target names have been provided
# Add identifier to tables and add them to the new rftable
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- names(reffinderlist)[i]
# Add the tables to the rftable
rftable <- rbind(rftable,reffinderlist[[i]]$stabilityTable)
}
}
# Create a holder for the algorithms list
algorithmlist <- names(rftable[2:6])
# Rename targets in each table by adding identifier (normally tissue type)
## necessary for arranging the graphs x-axis individually
rftable$Target <- paste(rftable$Target, "__", rftable$dataID, sep = "")
# Factorize each target based on the unique identifier
rftable$Target <- factor(rftable$Target, levels = rftable$Target)
# Melt the table
rftable <- reshape2::melt(rftable, c(names(rftable[1]), "dataID", "Target"),
measure.vars = algorithmlist,
variable.name = "algorithm",
value.name = "Stability"
)
rftable <- data.frame()
## Adding specific identifiers for each stability value
if(is.null(names(reffinderlist))){ # Target names have not been provided
# Add identifier to tables and add them to the new rftable
## If dataset are not named, use ID numbers
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- paste0("ID_", i)
# Add the tables to the rftable
rftable <- rbind(rftable, reffinderlist[[i]]$stabilityTable)
}
} else{ # Target names have been provided
# Add identifier to tables and add them to the new rftable
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- names(reffinderlist)[i]
# Add the tables to the rftable
rftable <- rbind(rftable,reffinderlist[[i]]$stabilityTable)
}
}
# Create a holder for the algorithms list
algorithmlist <- names(rftable[2:6])
# Rename targets in each table by adding identifier (normally tissue type)
## necessary for arranging the graphs x-axis individually
rftable$Target <- paste(rftable$Target, "__", rftable$dataID, sep = "")
# Factorize each target based on the unique identifier
rftable$Target <- factor(rftable$Target, levels = rftable$Target)
temp <- rftable
names(rftable[1]
)
rs_graphtemp <- function(reffinderlist, filename = "", forceSingle = FALSE, width, height, units = "px", res = 250, ordering = "Comprehensive Rank"){
# 2048, 2156, units = "px", res = 250
# names <- names(reffinderlist)
# if(filename==""){
#   cat("No file name provided, attempting to substract name\n")
#   filename <- deparse(substitute(reffinderlist))
#   cat("New file name given\n")
# }
# reffinderlist = rfres
# filename <- paste0(outdir, "/")
# forceSingle = TRUE
# Check to see if the provided list is a list of list or "just" a list (one data set).
## Will evaluate to TRUE if we are dealing with a simple list (one data set).
if(!is.null(reffinderlist$stabilityTable)){
cat("simplelist, only one dataset\n")
# name <- deparse(substitute(reffinderlist))
# cat(name)
name <- deparse(substitute(reffinderlist))
reffinderlist <- list(reffinderlist)
cat("\nreffinderlist converted\n")
cat(name)
names(reffinderlist) <- gsub("_", " ", name)
cat("\nreffinderlist renamed\n")
}
if(!is.null(reffinderlist[[1]]$stabilityTable)){
cat("list of lists, maybe more than one dataset\n")
names(reffinderlist) <- gsub("_", " ", names(reffinderlist))
if (forceSingle == FALSE) {
if(filename != ""){
if (missing(width)) {
width = length(reffinderlist) * 675
cat(paste("width set to", width, "\n"))
}
if (missing(height)) {
height = 2156
cat(paste("height set to", height, "\n"))
}
}
rsgraphdraw(reffinderlist, filename, width = width, height = height, units = "px", res = 250,  ordering = ordering)
} else { # forceSingle is TRUE
names <- names(reffinderlist)
if (missing(width)) {
width = 675
}
if (missing(height)) {
height = 2156
}
for (i in 1:length(names)) {
cat(names[i])
cat("\n")
rsgraphdraw(reffinderlist[i], paste0(filename, "_", gsub(" ", "_", names[i])), width = width, height = height, units = "px", res = 250, ordering = ordering)
}
}
}
}
rsgraphdrawtemp <- function(reffinderlist, filename = "", width, height, units = "px", res = 250, ordering = "Comprehensive Rank"){
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop(
cat("function stopped due to ggplot2"),
"Package \"ggplot2\" must be installed to use this function.",
call. = FALSE
)
}
if(ordering[1] != "Targetorder"){
for (i in 1:length(reffinderlist)) {
algonames <- names(reffinderlist[[i]]$stabilityTable)
sortcol <- which(algonames == ordering[1])
reffinderlist[[i]]$stabilityTable <- reffinderlist[[i]]$stabilityTable[order(reffinderlist[[i]]$stabilityTable[,sortcol]),]
}
}
rftable <- data.frame()
## Adding specific identifiers for each stability value
if(is.null(names(reffinderlist))){ # Target names have not been provided
# Add identifier to tables and add them to the new rftable
## If dataset are not named, use ID numbers
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- paste0("ID_", i)
# Add the tables to the rftable
rftable <- rbind(rftable, reffinderlist[[i]]$stabilityTable)
}
} else{ # Target names have been provided
# Add identifier to tables and add them to the new rftable
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- names(reffinderlist)[i]
# Add the tables to the rftable
rftable <- rbind(rftable,reffinderlist[[i]]$stabilityTable)
}
}
# Create a holder for the algorithms list
algorithmlist <- names(rftable[2:6])
# Rename targets in each table by adding identifier (normally tissue type)
## necessary for arranging the graphs x-axis individually
rftable$Target <- paste(rftable$Gene, "__", rftable$dataID, sep = "")
# Factorize each target based on the unique identifier
rftable$Target <- factor(rftable$Target, levels = rftable$Target)
# Melt the table
rftable <- reshape2::melt(rftable, c(names(rftable[1]), "dataID", "Target"),
measure.vars = algorithmlist,
variable.name = "algorithm",
value.name = "Stability"
)
# Factorize the algorithms for ordering in the graph
rftable$algorithm <- factor(rftable$algorithm, algorithmlist)
rftable$Stability <- as.numeric(rftable$Stability)
# Remove incomplete entries, should not be necessary
rftable <- rftable[stats::complete.cases(rftable),]
# Create ghost data frame to hold invisible values for setting the first 4 rows max value to the same value
ghostframe <- rftable
ghostframe$Stability <- 3
p <- ggplot2::ggplot(rftable, ggplot2::aes_string('Target', 'Stability')) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('Target', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value")
print( p )
if(filename != "") {
path <- paste0(filename, "_", Sys.Date(),".png")
grDevices::png(path, width = width, height = height, units = units, res = res)
print(p)
grDevices::dev.off()
cat( paste0("A png file was created at: ", normalizePath(path)) )
cat("\n")
}
}
rs_graphtemp(results)
results
results3
results
reffinderlist
rftable
rftable
rftable
rftable <- data.frame()
## Adding specific identifiers for each stability value
if(is.null(names(reffinderlist))){ # Target names have not been provided
# Add identifier to tables and add them to the new rftable
## If dataset are not named, use ID numbers
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- paste0("ID_", i)
# Add the tables to the rftable
rftable <- rbind(rftable, reffinderlist[[i]]$stabilityTable)
}
} else{ # Target names have been provided
# Add identifier to tables and add them to the new rftable
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- names(reffinderlist)[i]
# Add the tables to the rftable
rftable <- rbind(rftable,reffinderlist[[i]]$stabilityTable)
}
}
# Create a holder for the algorithms list
algorithmlist <- names(rftable[2:6])
# Rename targets in each table by adding identifier (normally tissue type)
## necessary for arranging the graphs x-axis individually
rftable$TargetID <- paste(rftable$Target, "__", rftable$dataID, sep = "")
# Factorize each target based on the unique identifier
rftable$TargetID <- factor(rftable$Target, levels = rftable$TargetID)
# Melt the table
rftable <- reshape2::melt(rftable, c(names(rftable[1]), "dataID", "TargetID"),
measure.vars = algorithmlist,
variable.name = "algorithm",
value.name = "Stability"
)
reffinderlist
rftable <- data.frame()
## Adding specific identifiers for each stability value
if(is.null(names(reffinderlist))){ # Target names have not been provided
# Add identifier to tables and add them to the new rftable
## If dataset are not named, use ID numbers
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- paste0("ID_", i)
# Add the tables to the rftable
rftable <- rbind(rftable, reffinderlist[[i]]$stabilityTable)
}
} else{ # Target names have been provided
# Add identifier to tables and add them to the new rftable
for (i in 1:length(reffinderlist)) {
# Add identifier
reffinderlist[[i]]$stabilityTable$dataID <- names(reffinderlist)[i]
# Add the tables to the rftable
rftable <- rbind(rftable,reffinderlist[[i]]$stabilityTable)
}
}
# Create a holder for the algorithms list
algorithmlist <- names(rftable[2:6])
# Rename targets in each table by adding identifier (normally tissue type)
## necessary for arranging the graphs x-axis individually
rftable$TargetID <- paste(rftable$Target, "__", rftable$dataID, sep = "")
# Factorize each target based on the unique identifier
rftable$TargetID <- factor(rftable$TargetID, levels = rftable$TargetID)
# Melt the table
rftable <- reshape2::melt(rftable, c(names(rftable[1]), "dataID", "TargetID"),
measure.vars = algorithmlist,
variable.name = "algorithm",
value.name = "Stability"
)
# Factorize the algorithms for ordering in the graph
rftable$algorithm <- factor(rftable$algorithm, algorithmlist)
rftable$Stability <- as.numeric(rftable$Stability)
# Remove incomplete entries, should not be necessary
rftable <- rftable[stats::complete.cases(rftable),]
# Create ghost data frame to hold invisible values for setting the first 4 rows max value to the same value
ghostframe <- rftable
ghostframe$Stability <- 3
p <- ggplot2::ggplot(rftable, ggplot2::aes_string('TargetID', 'Stability')) +
ggplot2::geom_bar(stat = "identity") +
# Invisible layer, alpha set to 0
ggplot2::geom_point(aes_string('TargetID', 'Stability'), ghostframe, alpha = 0) +
ggplot2::facet_grid(algorithm ~ dataID, scales = "free") +
ggplot2::scale_x_discrete(labels = function(x){gsub("__.+$", "", x)}) + # Remove prefix on target names
ggplot2::theme_bw() +
ggplot2::theme(axis.text.x = element_text(angle = 270, vjust = 0.2, hjust=0)) +
ggplot2::ylab("Stability value")
p
p + xlab("Target")
library(refSeeker)
rs_wizzard <- function(){
answer <- rsdialog()
outdir <- answer[2]
# Load in the data
datalist <- list()
for (i in 7:length(answer)) {
filext <- sub('.*\\.', '', answer[i])
if(substring( filext, 1,3) ==  "xls" | filext == "ods"){ datalist <- c(datalist, rs_loadexceldata(answer[i])) }
if(filext == "csv" | filext == "tsv" | filext == "txt"){ datalist <- c(datalist, rs_load.table(answer[i])) }
}
# Renaming duplicated names in the data list.
if(any(duplicated(names(datalist)))){
names(datalist) <- make.unique(names(datalist), ".")
warning("Some datasets have douplicated names. Suffix has been added to douplicates")
}
results <- rs_reffinder(datalist)
rs_graph(reffinderlist = results, filename = paste0(answer[2],"/testing"), forceSingle = (answer[3] == "individual"), ordering = answer[4])
rs_exceltable(results, paste0(answer[2],"/testing"))
}
rs_wizzard()
p
p
library(refSeeker)
input <- rs_loadexceldata()
results <- rs_reffinder(input)
plot <- rs_graphtemp(results)
plot <- rs_graph(results)
p
plot
grDevices::tiff("/home/patrick//Desktop/temp/tifftest",
width = 2025, height = 2156, units = "px",  compression = "none", res = 250)
#grDevices::png(path, width = width, height = height, units = units, res = res)
print(p)
p <- plot
grDevices::tiff("/home/patrick//Desktop/temp/tifftest",
width = 2025, height = 2156, units = "px",  compression = "none", res = 250)
#grDevices::png(path, width = width, height = height, units = units, res = res)
print(p)
grDevices::dev.off()
results
library(refSeeker)
plot <- rs_graph(results, filename <- "/home/patrick//Desktop/temp/testing", filetype = "jpeg")
library(refSeeker)
plot <- rs_graph(results, filename <- "/home/patrick//Desktop/temp/testing", filetype = "jpeg")
cat( paste0("An", filetype, "file was created at: ", normalizePath(path)) )
plot <- rs_graph(results, filename <- "/home/patrick//Desktop/temp/testing", filetype = "jpeg")
library(refSeeker)
plot <- rs_graph(results, filename <- "/home/patrick//Desktop/temp/testing", filetype = "jpeg")
plot <- rs_graph(results, filename <- "/home/patrick//Desktop/temp/testing", filetype = "tiff")
library(refSeeker)
plot <- rs_graph(results, filename <- "/home/patrick//Desktop/temp/testing", filetype = "tiff")
