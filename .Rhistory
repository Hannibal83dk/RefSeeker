files <- gsub("\\}", "", files)
}
library(tcltk)
if(any(files == "")){
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
# A single string is returned to files
if(files != ""){ files <- strsplit(files, "\\} \\{")[[1]] }
files <- gsub("\\{", "", files)
files <- gsub("\\}", "", files)
}
files
# A single string is returned to files
if(files != ""){
# if there were spaces in the file paths
files <- strsplit(files, "\\} \\{")[[1]]
files <- gsub("\\{", "", files)
files <- gsub("\\}", "", files)
files <- strsplit(files, " ")[[1]]
}
files
files = ""
if(any(files == "")){
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
# A single string is returned to files
if(files != ""){
# if there were spaces in the file paths
files <- strsplit(files, "\\} \\{")[[1]]
files <- gsub("\\{", "", files)
files <- gsub("\\}", "", files)
files <- strsplit(files, " ")[[1]]
}
}
files
grep("\\} \\{", files)
files
files = ""
filter <- c("{{Supported} {.txt}}",
"{{Supported} {.csv}}",
"{{Supported} {.tsv}}",
"{{Supported} {.xlsx}}",
"{{Supported} {.xls}}",
"{{Supported} {.ods}}",
"{{All files} {*}}")
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
files
grep("\\} \\{", files)
grepl("\\} \\{", files)
files == ""
if(any(files == "")){
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
# A single string is returned to files with either space as file separator or each file is contained in {} if spaces are found in paths
if(files != ""){
if(grepl("\\} \\{", files)){
# if there were spaces in the file paths
files <- strsplit(files, "\\} \\{")[[1]]
files <- gsub("\\{", "", files)
files <- gsub("\\}", "", files)
} else {files <- strsplit(files, " ")[[1]]}
}
}
files = ""
if(any(files == "")) {
cat("No files found, terminating")
return()
}
files
if(any(files == "")){
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
# A single string is returned to files with either space as file separator or each file is contained in {} if spaces are found in paths
if(files != ""){
if(grepl("\\} \\{", files)){
# if there were spaces in the file paths
files <- strsplit(files, "\\} \\{")[[1]]
files <- gsub("\\{", "", files)
files <- gsub("\\}", "", files)
} else {files <- strsplit(files, " ")[[1]]}
}
}
files
rs_loaddata
data <- rs_loaddata()
data
data <- rs_loaddata()
data
data <- rs_loaddata()
files = ""
filter <- c("{{Supported} {.txt}}",
"{{Supported} {.csv}}",
"{{Supported} {.tsv}}",
"{{Supported} {.xlsx}}",
"{{Supported} {.xls}}",
"{{Supported} {.ods}}",
"{{All files} {*}}")
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
files
# A single string is returned to files with either space as file separator or each file is contained in {} if spaces are found in paths
if(files != ""){
if(grepl("\\{", files)){
# if there were spaces in the file paths
files <- strsplit(files, "\\} \\{")[[1]]
files <- gsub("\\{", "", files)
files <- gsub("\\}", "", files)
} else {files <- strsplit(files, " ")[[1]]}
}
files
library(RefSeeker)
data <- rs_loaddata()
data
data <- rs_loaddata()
data
data <- rs_loaddata()
data
data <- rs_loaddata()
data
refres <- rs_reffinder(data)
refres
library(RefSeeker)
library(RefSeeker)
refres <- rs_reffinder(data)
message("Please note that the target names has been factorized based on the appearance in the input dataset, \nthis effects sorting of the targets column and taget sorting during graph creation if soting by target is chosen.")
library(RefSeeker)
refres <- rs_reffinder(data)
getwd()
library(RefSeeker)
input <- rs_loaddata()
View(input)
input <- rs_loaddata()
input$FFPE
library(RefSeeker)
write.csv(input$FFPE[6:10], "FFPE.csv", row.names = FALSE)
getwd(/)
getwd()
write.csv(input$Fresh_frozen[6:10], "Fresh_frozen.csv", row.names = FALSE)
write.csv(input$Plasma[6:10], "Plasma.csv", row.names = FALSE)
write.tsv(input$FFPE[6:10], "FFPE.tsv", row.names = FALSE)
write.tsv(input$Fresh_frozen[6:10], "Fresh_frozen.tsv", row.names = FALSE)
write.tsv(input$Plasma[6:10], "Plasma.tsv", row.names = FALSE)
write.table(input$FFPE[6:10], "FFPE.tsv", sep = "\t", row.names = FALSE)
write.table(input$Fresh_frozen[6:10], "Fresh_frozen.tsv", sep = "\t", row.names = FALSE)
write.table(input$Plasma[6:10], "Plasma.tsv", sep = "\t", row.names = FALSE)
input$FFPE[6:10]
write.csv(input$FFPE[, 6:10], "FFPE.csv", sep = "\t", row.names = FALSE)
write.csv(input$Fresh_frozen[, 6:10], "Fresh_frozen.csv", sep = "\t", row.names = FALSE)
write.csv(input$Plasma[, 6:10], "Plasma.csv", sep = "\t", row.names = FALSE)
write.table(input$FFPE[, 6:10], "FFPE.tsv", sep = "\t", row.names = FALSE)
write.table(input$Fresh_frozen[, 6:10], "Fresh_frozen.tsv", sep = "\t", row.names = FALSE)
write.table(input$Plasma[, 6:10], "Plasma.tsv", sep = "\t", row.names = FALSE)
write.table(input$FFPE[, 6:10], "FFPE.txt", row.names = FALSE)
write.table(input$Fresh_frozen[, 6:10], "Fresh_frozen.txt", row.names = FALSE)
write.table(input$Plasma[, 6:10], "Plasma.txt", row.names = FALSE)
input <- rs_loaddata()
input$FFPE
library(RefSeeker)
rs_loaddata()
OC_data <- rs_loaddata()
rs_wizard()
library(RefSeeker)
rs_loaddata
rs_wizard()
outdir = "",
inputfile = c("No selection"),
filename = "RefSeeker",
graphtype = "multi",
ordering = "Comprehensive Rank",
imagetype = "png",
orientation = "horizontal",
tabletype = "xlsx"
outdir = ""
inputfile = c("No selection")
(outdir = "",
inputfile = c("No selection"),
filename = "RefSeeker",
graphtype = "multi",
ordering = "Comprehensive Rank",
imagetype = "png",
orientation = "horizontal",
tabletype = "xlsx")
filename = "RefSeeker"
graphtype = "multi"
ordering = "Comprehensive Rank"
imagetype = "png"
orientation = "horizontal"
tabletype = "xlsx"
answer <- rsdialog(outdir = outdir,
inputfile = inputfile,
filename = filename,
graphtype = graphtype,
ordering = ordering,
imagetype = imagetype,
orientation = orientation,
tabletype = tabletype)
outdir <- answer[2]
answer
datalist <- rs_loaddata(answer[9:length(answer)])
answer[9:length(answer)]
library(RefSeeker)
answer <- rsdialog(outdir = outdir,
inputfile = inputfile,
filename = filename,
graphtype = graphtype,
ordering = ordering,
imagetype = imagetype,
orientation = orientation,
tabletype = tabletype)
outdir <- answer[2]
datalist <- rs_loaddata(answer[9:length(answer)])
answer[9:length(answer)]
rsdialog
library(RefSeeker)
answer <- rsdialog(outdir = outdir,
inputfile = inputfile,
filename = filename,
graphtype = graphtype,
ordering = ordering,
imagetype = imagetype,
orientation = orientation,
tabletype = tabletype)
9:length(answer)]
answer[9:length(answer)]
datalist <- rs_loaddata(answer[9:length(answer)])
library(RefSeeker)
answer <- rsdialog(outdir = outdir,
inputfile = inputfile,
filename = filename,
graphtype = graphtype,
ordering = ordering,
imagetype = imagetype,
orientation = orientation,
tabletype = tabletype)
answer
answer <- rsdialog(outdir = outdir,
inputfile = inputfile,
filename = filename,
graphtype = graphtype,
ordering = ordering,
imagetype = imagetype,
orientation = orientation,
tabletype = tabletype)
answer
answer <- rsdialog(outdir = outdir,
inputfile = inputfile,
filename = filename,
graphtype = graphtype,
ordering = ordering,
imagetype = imagetype,
orientation = orientation,
tabletype = tabletype)
answer
answer
library(RefSeeker)
answer <- rsdialog(outdir = outdir,
inputfile = inputfile,
filename = filename,
graphtype = graphtype,
ordering = ordering,
imagetype = imagetype,
orientation = orientation,
tabletype = tabletype)
answer
library(RefSeeker)
answer <- rsdialog(outdir = outdir,
inputfile = inputfile,
filename = filename,
graphtype = graphtype,
ordering = ordering,
imagetype = imagetype,
orientation = orientation,
tabletype = tabletype)
answer
filter <- c("{{Supported} {.txt}}",
"{{Supported} {.csv}}",
"{{Supported} {.tsv}}",
"{{Supported} {.xlsx}}",
"{{Supported} {.xls}}",
"{{Supported} {.ods}}",
"{{All files} {*}}")
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
library(tcltk)
filter <- c("{{Supported} {.txt}}",
"{{Supported} {.csv}}",
"{{Supported} {.tsv}}",
"{{Supported} {.xlsx}}",
"{{Supported} {.xls}}",
"{{Supported} {.ods}}",
"{{All files} {*}}")
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
files
filter <- c("{{Supported} {.txt}}",
"{{Supported} {.csv}}",
"{{Supported} {.tsv}}",
"{{Supported} {.xlsx}}",
"{{Supported} {.xls}}",
"{{Supported} {.ods}}",
"{{All files} {*}}")
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
files
filter <- c("{{Supported} {.txt}}",
"{{Supported} {.csv}}",
"{{Supported} {.tsv}}",
"{{Supported} {.xlsx}}",
"{{Supported} {.xls}}",
"{{Supported} {.ods}}",
"{{All files} {*}}")
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
files
files != ""
grepl("\\{", inputfile[1])
inputfile[1]
grepl("\\{", files[1])
if(files != ""){
# A single string is returned to files with either space as file separator or each file is contained in {} if spaces are found in paths
if(grepl("\\{", files[1])){
# if there were spaces in the file paths
inputfile <- strsplit(files, "\\} \\{")[[1]]
inputfile <- gsub("\\{", "", files)
inputfile <- gsub("\\}", "", files)
} else {inputfile <- strsplit(inputfile, " ")[[1]]}
# files <- strsplit(files, " ")[[1]]
}
if(files != ""){
# A single string is returned to files with either space as file separator or each file is contained in {} if spaces are found in paths
if(grepl("\\{", files[1])){
# if there were spaces in the file paths
files <- strsplit(files, "\\} \\{")[[1]]
files <- gsub("\\{", "", files)
files <- gsub("\\}", "", files)
} else {files <- strsplit(files, " ")[[1]]}
# files <- strsplit(files, " ")[[1]]
}
files
filter <- c("{{Supported} {.txt}}",
"{{Supported} {.csv}}",
"{{Supported} {.tsv}}",
"{{Supported} {.xlsx}}",
"{{Supported} {.xls}}",
"{{Supported} {.ods}}",
"{{All files} {*}}")
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
files
files != ""
grepl("\\{", files[1])
files <- strsplit(files, " ")[[1]]
files
str(files)
filter <- c("{{Supported} {.txt}}",
"{{Supported} {.csv}}",
"{{Supported} {.tsv}}",
"{{Supported} {.xlsx}}",
"{{Supported} {.xls}}",
"{{Supported} {.ods}}",
"{{All files} {*}}")
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
files
files != ""
grepl("\\{", files[1])
if(files != ""){
# A single string is returned to files with either space as file separator or each file is contained in {} if spaces are found in paths
if(grepl("\\{", files[1])){
# if there were spaces in the file paths
files <- strsplit(files, "\\} \\{")[[1]]
files <- gsub("\\{", "", files)
files <- gsub("\\}", "", files)
} else {files <- strsplit(files, " ")[[1]]}
# files <- strsplit(files, " ")[[1]]
}
files
#'
#' @examples
#'
#' \dontrun{
#'
#' rsselectfiles()
#' }
#'
#'
#'
rsselectfiles <- function(){
filter <- c("{{Supported} {.txt}}",
"{{Supported} {.csv}}",
"{{Supported} {.tsv}}",
"{{Supported} {.xlsx}}",
"{{Supported} {.xls}}",
"{{Supported} {.ods}}",
"{{All files} {*}}")
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
return(files)
if(files != ""){
# A single string is returned to files with either space as file separator or each file is contained in {} if spaces are found in paths
if(grepl("\\{", files[1])){
# if there were spaces in the file paths
files <- strsplit(files, "\\} \\{")[[1]]
files <- gsub("\\{", "", files)
files <- gsub("\\}", "", files)
} else {files <- strsplit(files, " ")[[1]]}
# files <- strsplit(files, " ")[[1]]
}
if(any(files == "")) {
return(cat("No files selected, terminating"))
}
return(files)
}
rsselectfiles()
#'
#' @examples
#'
#' \dontrun{
#'
#' rsselectfiles()
#' }
#'
#'
#'
rsselectfiles <- function(){
filter <- c("{{Supported} {.txt}}",
"{{Supported} {.csv}}",
"{{Supported} {.tsv}}",
"{{Supported} {.xlsx}}",
"{{Supported} {.xls}}",
"{{Supported} {.ods}}",
"{{All files} {*}}")
files <- tclvalue( tkgetOpenFile(multiple = TRUE, initialdir = getwd(),  filetypes = paste(filter, collapse = " "))  )
if(files != ""){
# A single string is returned to files with either space as file separator or each file is contained in {} if spaces are found in paths
if(grepl("\\{", files[1])){
# if there were spaces in the file paths
files <- strsplit(files, "\\} \\{")[[1]]
files <- gsub("\\{", "", files)
files <- gsub("\\}", "", files)
} else {files <- strsplit(files, " ")[[1]]}
# files <- strsplit(files, " ")[[1]]
}
if(any(files == "")) {
return(cat("No files selected, terminating"))
}
return(files)
}
rsselectfiles()
library(RefSeeker)
rs_loaddata()
rs_loaddata()
files
files <- rsselectfiles()
files
library(RefSeeker)
files <- rsselectfiles()
files
file <- -1
files <- -1
library(RefSeeker)
files <- rsselectfiles()
library(RefSeeker)
files <- rsselectfiles()
files <- rsselectfiles()
library(RefSeeker)
files <- rsselectfiles()
library(RefSeeker)
files <- rsselectfiles()
files <- RefSeeker::rsselectfiles()
files <- RefSeeker:::rsselectfiles()
files
files = ""
filter <- c("{{Supported} {.txt}}",
"{{Supported} {.csv}}",
"{{Supported} {.tsv}}",
"{{Supported} {.xlsx}}",
"{{Supported} {.xls}}",
"{{Supported} {.ods}}",
"{{All files} {*}}")
files <- RefSeeker:::rsselectfiles()
files
if(files)
{TRUE}
if(files){TRUE}
if(files == -1){TRUE}
if(files == -1){return()}
library(RefSeeker)
library(RefSeeker)
rs_loaddata()
library(RefSeeker)
rs_loaddata()
rs_wizard()
rs_wizard()
library(RefSeeker)
rs_wizard()
library(RefSeeker)
rs_wizard()
rs_wizard()
rs_wizard()
rs_wizard()
rs_loaddata()
library(RefSeeker)
rs_loaddata()
rs_loaddata()
rs_wizard()
rs_wizard()
library(RefSeeker)
rs_wizard()
answer <- rsdialog(outdir = outdir,
inputfile = inputfile,
filename = filename,
graphtype = graphtype,
ordering = ordering,
imagetype = imagetype,
orientation = orientation,
tabletype = tabletype)
outdir = ""
answer <- rsdialog(
)
answer
library(RefSeeker)
rs_wizard()
library(RefSeeker)
